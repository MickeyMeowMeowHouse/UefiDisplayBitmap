	.text
	.def	 @feat.00;
	.scl	3;
	.type	0;
	.endef
	.globl	@feat.00
.set @feat.00, 0
	.intel_syntax noprefix
	.file	"string.c"
	.def	 FillMemory;
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",one_only,FillMemory
	.globl	FillMemory              # -- Begin function FillMemory
	.p2align	4, 0x90
FillMemory:                             # @FillMemory
.Lfunc_begin0:
	.cv_func_id 0
	.cv_file	1 "D:\\Projects\\HelloUefiBmpRes\\string.c" "B6E477DEB9E376FD6D1F7D813425F6DF" 1
	.cv_loc	0 1 6 0                 # .\string.c:6:0
# %bb.0:
	#DEBUG_VALUE: FillMemory:Size <- $r8
	#DEBUG_VALUE: FillMemory:Value <- $dl
	#DEBUG_VALUE: FillMemory:Buffer <- $rcx
	.cv_loc	0 1 7 0                 # .\string.c:7:0
	mov	r9d, edx
	#DEBUG_VALUE: FillMemory:Buffer <- $rcx
.Ltmp0:
	#DEBUG_VALUE: FillMemory:Value <- $r9b
	#DEBUG_VALUE: FillMemory:Size <- $r8
	mov	rdx, qword ptr [rip + EfiBoot]
	mov	rax, qword ptr [rdx + 360]
	#DEBUG_VALUE: FillMemory:Buffer <- $rcx
	mov	rdx, r8
.Ltmp1:
	#DEBUG_VALUE: FillMemory:Size <- $rdx
	mov	r8d, r9d
.Ltmp2:
	#DEBUG_VALUE: FillMemory:Value <- $r8b
	rex64 jmp	rax             # TAILCALL
.Ltmp3:
.Lfunc_end0:
                                        # -- End function
	.def	 StringAnsiToUnicode;
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",one_only,StringAnsiToUnicode
	.globl	StringAnsiToUnicode     # -- Begin function StringAnsiToUnicode
	.p2align	4, 0x90
StringAnsiToUnicode:                    # @StringAnsiToUnicode
.Lfunc_begin1:
	.cv_func_id 1
	.cv_loc	1 1 11 0                # .\string.c:11:0
# %bb.0:
	#DEBUG_VALUE: StringAnsiToUnicode:Limit <- $r8
	#DEBUG_VALUE: StringAnsiToUnicode:StrSrc <- $rdx
	#DEBUG_VALUE: StringAnsiToUnicode:StrDest <- $rcx
	.cv_loc	1 1 12 0                # .\string.c:12:0
	mov	r10, rdx
	mov	r9, rcx
.Ltmp4:
	#DEBUG_VALUE: StringAnsiToUnicode:StrDest <- $r9
	#DEBUG_VALUE: StringAnsiToUnicode:StrSrc <- $r10
	#DEBUG_VALUE: StringAnsiToUnicode:Limit <- $r8
	mov	rcx, qword ptr [rip + UnicodeCollation]
	mov	rax, qword ptr [rcx + 32]
	mov	rdx, r8
.Ltmp5:
	#DEBUG_VALUE: StringAnsiToUnicode:Limit <- $rdx
	mov	r8, r10
	#DEBUG_VALUE: StringAnsiToUnicode:StrDest <- $r9
.Ltmp6:
	#DEBUG_VALUE: StringAnsiToUnicode:StrSrc <- $r8
	rex64 jmp	rax             # TAILCALL
.Ltmp7:
.Lfunc_end1:
                                        # -- End function
	.def	 StringCopyNW;
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",one_only,StringCopyNW
	.globl	StringCopyNW            # -- Begin function StringCopyNW
	.p2align	4, 0x90
StringCopyNW:                           # @StringCopyNW
.Lfunc_begin2:
	.cv_func_id 2
	.cv_loc	2 1 17 0                # .\string.c:17:0
# %bb.0:
	#DEBUG_VALUE: StringCopyNW:limit <- $r8
	#DEBUG_VALUE: StringCopyNW:src <- $rdx
	#DEBUG_VALUE: StringCopyNW:dest <- $rcx
	.cv_loc	2 1 18 0                # .\string.c:18:0
	mov	rax, rcx
.Ltmp8:
	#DEBUG_VALUE: i <- 0
	#DEBUG_VALUE: StringCopyNW:dest <- $rax
	#DEBUG_VALUE: StringCopyNW:src <- $rdx
	#DEBUG_VALUE: StringCopyNW:limit <- $r8
	test	r8, r8
	je	.LBB2_4
.Ltmp9:
# %bb.1:
	#DEBUG_VALUE: StringCopyNW:dest <- $rax
	#DEBUG_VALUE: i <- 0
	#DEBUG_VALUE: StringCopyNW:src <- $rdx
	#DEBUG_VALUE: StringCopyNW:limit <- $r8
	mov	r9d, 1
.Ltmp10:
	.p2align	4, 0x90
.LBB2_2:                                # =>This Inner Loop Header: Depth=1
	#DEBUG_VALUE: StringCopyNW:dest <- $rax
	#DEBUG_VALUE: i <- 0
	#DEBUG_VALUE: StringCopyNW:src <- $rdx
	#DEBUG_VALUE: StringCopyNW:limit <- $r8
	#DEBUG_VALUE: i <- undef
	.cv_loc	2 1 20 0                # .\string.c:20:0
	movzx	ecx, word ptr [rdx + 2*r9 - 2]
	mov	word ptr [rax + 2*r9 - 2], cx
.Ltmp11:
	#DEBUG_VALUE: i <- [DW_OP_plus_uconst 1, DW_OP_stack_value] undef
	.cv_loc	2 1 21 0                # .\string.c:21:0
	cmp	word ptr [rdx + 2*r9 - 2], 0
	je	.LBB2_4
.Ltmp12:
# %bb.3:                                #   in Loop: Header=BB2_2 Depth=1
	#DEBUG_VALUE: StringCopyNW:dest <- $rax
	#DEBUG_VALUE: i <- 0
	#DEBUG_VALUE: StringCopyNW:src <- $rdx
	#DEBUG_VALUE: StringCopyNW:limit <- $r8
	cmp	r9, r8
	lea	r9, [r9 + 1]
	jb	.LBB2_2
.Ltmp13:
.LBB2_4:
	#DEBUG_VALUE: StringCopyNW:dest <- $rax
	#DEBUG_VALUE: StringCopyNW:src <- $rdx
	#DEBUG_VALUE: StringCopyNW:limit <- $r8
	.cv_loc	2 1 23 0                # .\string.c:23:0
	ret
.Ltmp14:
.Lfunc_end2:
                                        # -- End function
	.def	 StringLengthW;
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",one_only,StringLengthW
	.globl	StringLengthW           # -- Begin function StringLengthW
	.p2align	4, 0x90
StringLengthW:                          # @StringLengthW
.Lfunc_begin3:
	.cv_func_id 3
	.cv_loc	3 1 28 0                # .\string.c:28:0
# %bb.0:
	#DEBUG_VALUE: StringLengthW:String <- $rcx
	#DEBUG_VALUE: StringLengthW:String <- $rcx
	mov	rax, -1
.Ltmp15:
	#DEBUG_VALUE: StringLengthW:i <- 0
	.p2align	4, 0x90
.LBB3_1:                                # =>This Inner Loop Header: Depth=1
	#DEBUG_VALUE: StringLengthW:i <- 0
	#DEBUG_VALUE: StringLengthW:String <- $rcx
	#DEBUG_VALUE: StringLengthW:i <- undef
	#DEBUG_VALUE: StringLengthW:i <- [DW_OP_plus_uconst 1, DW_OP_stack_value] undef
	.cv_loc	3 1 30 0                # .\string.c:30:0
	cmp	word ptr [rcx + 2*rax + 2], 0
	lea	rax, [rax + 1]
	jne	.LBB3_1
.Ltmp16:
# %bb.2:
	#DEBUG_VALUE: StringLengthW:i <- 0
	#DEBUG_VALUE: StringLengthW:String <- $rcx
	#DEBUG_VALUE: StringLengthW:i <- undef
	.cv_loc	3 1 31 0                # .\string.c:31:0
	ret
.Ltmp17:
.Lfunc_end3:
                                        # -- End function
	.def	 StringReverseW;
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",one_only,StringReverseW
	.globl	StringReverseW          # -- Begin function StringReverseW
	.p2align	4, 0x90
StringReverseW:                         # @StringReverseW
.Lfunc_begin4:
	.cv_func_id 4
# %bb.0:
	#DEBUG_VALUE: StringReverseW:String <- $rcx
	#DEBUG_VALUE: StringReverseW:String <- $rcx
	#DEBUG_VALUE: StringReverseW:left <- $rcx
	#DEBUG_VALUE: StringReverseW:left <- $rcx
	.cv_loc	4 1 38 0                # .\string.c:38:0
	lea	rax, [rcx - 4]
.Ltmp18:
	.p2align	4, 0x90
.LBB4_1:                                # =>This Inner Loop Header: Depth=1
	#DEBUG_VALUE: StringReverseW:left <- $rcx
	#DEBUG_VALUE: StringReverseW:String <- $rcx
	#DEBUG_VALUE: StringReverseW:String <- undef
	#DEBUG_VALUE: StringReverseW:String <- [DW_OP_plus_uconst 2, DW_OP_stack_value] undef
	cmp	word ptr [rax + 4], 0
	lea	rax, [rax + 2]
	jne	.LBB4_1
.Ltmp19:
# %bb.2:
	#DEBUG_VALUE: StringReverseW:left <- $rcx
	#DEBUG_VALUE: StringReverseW:String <- $rcx
	#DEBUG_VALUE: StringReverseW:String <- undef
	#DEBUG_VALUE: StringReverseW:left <- $rcx
	.cv_loc	4 1 40 0                # .\string.c:40:0
	cmp	rax, rcx
	jbe	.LBB4_5
.Ltmp20:
# %bb.3:
	#DEBUG_VALUE: StringReverseW:left <- $rcx
	#DEBUG_VALUE: StringReverseW:String <- $rcx
	add	rcx, 2
.Ltmp21:
	.p2align	4, 0x90
.LBB4_4:                                # =>This Inner Loop Header: Depth=1
	#DEBUG_VALUE: StringReverseW:left <- undef
	.cv_loc	4 1 42 0                # .\string.c:42:0
	movzx	r8d, word ptr [rcx - 2]
.Ltmp22:
	#DEBUG_VALUE: StringReverseW:c <- $r8w
	.cv_loc	4 1 43 0                # .\string.c:43:0
	movzx	edx, word ptr [rax]
.Ltmp23:
	#DEBUG_VALUE: StringReverseW:left <- [DW_OP_plus_uconst 2, DW_OP_stack_value] undef
	mov	word ptr [rcx - 2], dx
.Ltmp24:
	#DEBUG_VALUE: StringReverseW:String <- [DW_OP_constu 2, DW_OP_minus, DW_OP_stack_value] $rax
	.cv_loc	4 1 44 0                # .\string.c:44:0
	mov	word ptr [rax], r8w
.Ltmp25:
	add	rax, -2
.Ltmp26:
	#DEBUG_VALUE: StringReverseW:String <- $rax
	.cv_loc	4 1 40 0                # .\string.c:40:0
	cmp	rcx, rax
	lea	rcx, [rcx + 2]
	jb	.LBB4_4
.Ltmp27:
.LBB4_5:
	.cv_loc	4 1 46 0                # .\string.c:46:0
	ret
.Ltmp28:
.Lfunc_end4:
                                        # -- End function
	.def	 StringCompareW;
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",one_only,StringCompareW
	.globl	StringCompareW          # -- Begin function StringCompareW
	.p2align	4, 0x90
StringCompareW:                         # @StringCompareW
.Lfunc_begin5:
	.cv_func_id 5
	.cv_loc	5 1 49 0                # .\string.c:49:0
# %bb.0:
	#DEBUG_VALUE: StringCompareW:String2 <- $rdx
	#DEBUG_VALUE: StringCompareW:String1 <- $rcx
	xor	eax, eax
.Ltmp29:
	#DEBUG_VALUE: StringCompareW:i <- 0
	#DEBUG_VALUE: StringCompareW:String1 <- $rcx
	#DEBUG_VALUE: StringCompareW:String2 <- $rdx
	xor	r8d, r8d
.Ltmp30:
	.p2align	4, 0x90
.LBB5_1:                                # =>This Inner Loop Header: Depth=1
	#DEBUG_VALUE: StringCompareW:i <- 0
	#DEBUG_VALUE: StringCompareW:String1 <- $rcx
	#DEBUG_VALUE: StringCompareW:String2 <- $rdx
	#DEBUG_VALUE: StringCompareW:i <- undef
	.cv_loc	5 1 51 0                # .\string.c:51:0
	movzx	r9d, word ptr [rcx + r8]
	movzx	r10d, word ptr [rdx + r8]
	mov	r11d, r9d
	or	r11w, r10w
	je	.LBB5_6
.Ltmp31:
# %bb.2:                                #   in Loop: Header=BB5_1 Depth=1
	#DEBUG_VALUE: StringCompareW:i <- 0
	#DEBUG_VALUE: StringCompareW:String1 <- $rcx
	#DEBUG_VALUE: StringCompareW:String2 <- $rdx
	.cv_loc	5 1 53 0                # .\string.c:53:0
	cmp	r9w, r10w
	ja	.LBB5_3
.Ltmp32:
# %bb.4:                                #   in Loop: Header=BB5_1 Depth=1
	#DEBUG_VALUE: StringCompareW:i <- 0
	#DEBUG_VALUE: StringCompareW:String1 <- $rcx
	#DEBUG_VALUE: StringCompareW:String2 <- $rdx
	#DEBUG_VALUE: StringCompareW:i <- [DW_OP_plus_uconst 1, DW_OP_stack_value] undef
	.cv_loc	5 1 55 0                # .\string.c:55:0
	add	r8, 2
	cmp	r9w, r10w
	jae	.LBB5_1
.Ltmp33:
# %bb.5:
	#DEBUG_VALUE: StringCompareW:i <- 0
	#DEBUG_VALUE: StringCompareW:String1 <- $rcx
	#DEBUG_VALUE: StringCompareW:String2 <- $rdx
	mov	eax, -1
.Ltmp34:
.LBB5_6:
	#DEBUG_VALUE: StringCompareW:i <- 0
	#DEBUG_VALUE: StringCompareW:String1 <- $rcx
	#DEBUG_VALUE: StringCompareW:String2 <- $rdx
	.cv_loc	5 1 61 0                # .\string.c:61:0
                                        # kill: def $eax killed $eax killed $rax
	ret
.Ltmp35:
.LBB5_3:
	#DEBUG_VALUE: StringCompareW:i <- 0
	#DEBUG_VALUE: StringCompareW:String1 <- $rcx
	#DEBUG_VALUE: StringCompareW:String2 <- $rdx
	mov	eax, 1
                                        # kill: def $eax killed $eax killed $rax
	ret
.Ltmp36:
.Lfunc_end5:
                                        # -- End function
	.def	 IntegerToDecimalW;
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",one_only,IntegerToDecimalW
	.globl	IntegerToDecimalW       # -- Begin function IntegerToDecimalW
	.p2align	4, 0x90
IntegerToDecimalW:                      # @IntegerToDecimalW
.Lfunc_begin6:
	.cv_func_id 6
	.cv_loc	6 1 65 0                # .\string.c:65:0
# %bb.0:
	#DEBUG_VALUE: IntegerToDecimalW:String <- $rdx
	#DEBUG_VALUE: IntegerToDecimalW:Value <- $ecx
	#DEBUG_VALUE: IntegerToDecimalW:q <- $ecx
	.cv_loc	6 1 68 0                # .\string.c:68:0
                                        # kill: def $ecx killed $ecx def $rcx
	#DEBUG_VALUE: IntegerToDecimalW:i <- 0
	#DEBUG_VALUE: IntegerToDecimalW:q <- $ecx
	#DEBUG_VALUE: IntegerToDecimalW:Value <- $ecx
	#DEBUG_VALUE: IntegerToDecimalW:String <- $rdx
	test	ecx, ecx
	je	.LBB6_10
.Ltmp37:
# %bb.1:
	#DEBUG_VALUE: IntegerToDecimalW:i <- 0
	#DEBUG_VALUE: IntegerToDecimalW:q <- $ecx
	#DEBUG_VALUE: IntegerToDecimalW:Value <- $ecx
	#DEBUG_VALUE: IntegerToDecimalW:String <- $rdx
	xor	r9d, r9d
.Ltmp38:
	.p2align	4, 0x90
.LBB6_2:                                # =>This Inner Loop Header: Depth=1
	#DEBUG_VALUE: IntegerToDecimalW:String <- $rdx
	#DEBUG_VALUE: IntegerToDecimalW:q <- $ecx
	#DEBUG_VALUE: IntegerToDecimalW:i <- $r9
	.cv_loc	6 1 69 0                # .\string.c:69:0
	movsxd	r8, ecx
	imul	r11, r8, 1717986919
	mov	r10, r11
	shr	r10, 63
	sar	r11, 34
	add	r11d, r10d
.Ltmp39:
	#DEBUG_VALUE: IntegerToDecimalW:q <- $r11d
	lea	eax, [r11 + r11]
	lea	eax, [rax + 4*rax]
.Ltmp40:
	.cv_loc	6 1 72 0                # .\string.c:72:0
	neg	eax
	add	eax, ecx
	add	eax, 48
	mov	word ptr [rdx + 2*r9], ax
	add	r9, 1
.Ltmp41:
	#DEBUG_VALUE: r <- undef
	#DEBUG_VALUE: IntegerToDecimalW:i <- $r9
	.cv_loc	6 1 69 0                # .\string.c:69:0
	add	r8d, 9
	mov	ecx, r11d
	cmp	r8d, 18
	ja	.LBB6_2
.Ltmp42:
# %bb.3:
	#DEBUG_VALUE: IntegerToDecimalW:q <- $r11d
	#DEBUG_VALUE: IntegerToDecimalW:i <- $r9
	#DEBUG_VALUE: IntegerToDecimalW:String <- $rdx
	.cv_loc	6 1 74 0                # .\string.c:74:0
	mov	eax, r9d
	jmp	.LBB6_4
.Ltmp43:
.LBB6_10:
	#DEBUG_VALUE: IntegerToDecimalW:i <- 0
	#DEBUG_VALUE: IntegerToDecimalW:q <- $ecx
	#DEBUG_VALUE: IntegerToDecimalW:Value <- $ecx
	#DEBUG_VALUE: IntegerToDecimalW:String <- $rdx
	#DEBUG_VALUE: IntegerToDecimalW:i <- 1
	.cv_loc	6 1 68 0                # .\string.c:68:0
	mov	word ptr [rdx], 48
	mov	eax, 1
.Ltmp44:
	#DEBUG_VALUE: IntegerToDecimalW:i <- 0
	#DEBUG_VALUE: IntegerToDecimalW:q <- undef
.LBB6_4:
	#DEBUG_VALUE: IntegerToDecimalW:String <- $rdx
	#DEBUG_VALUE: IntegerToDecimalW:i <- undef
	.cv_loc	6 1 74 0                # .\string.c:74:0
	mov	word ptr [rdx + 2*rax], 0
.Ltmp45:
	#DEBUG_VALUE: StringReverseW:left <- $rdx
	#DEBUG_VALUE: StringReverseW:String <- $rdx
	.cv_inline_site_id 7 within 6 inlined_at 1 75 0
	.cv_loc	7 1 38 0                # .\string.c:38:0
	lea	rax, [rdx - 4]
.Ltmp46:
	.p2align	4, 0x90
.LBB6_5:                                # =>This Inner Loop Header: Depth=1
	#DEBUG_VALUE: StringReverseW:String <- $rdx
	#DEBUG_VALUE: StringReverseW:left <- $rdx
	#DEBUG_VALUE: IntegerToDecimalW:String <- $rdx
	#DEBUG_VALUE: StringReverseW:String <- undef
	#DEBUG_VALUE: StringReverseW:String <- [DW_OP_plus_uconst 2, DW_OP_stack_value] undef
	cmp	word ptr [rax + 4], 0
	lea	rax, [rax + 2]
	jne	.LBB6_5
.Ltmp47:
# %bb.6:
	#DEBUG_VALUE: StringReverseW:String <- $rdx
	#DEBUG_VALUE: StringReverseW:left <- $rdx
	#DEBUG_VALUE: IntegerToDecimalW:String <- $rdx
	#DEBUG_VALUE: StringReverseW:String <- undef
	#DEBUG_VALUE: StringReverseW:left <- $rdx
	.cv_loc	7 1 40 0                # .\string.c:40:0
	cmp	rax, rdx
	jbe	.LBB6_9
.Ltmp48:
# %bb.7:
	#DEBUG_VALUE: StringReverseW:String <- $rdx
	#DEBUG_VALUE: StringReverseW:left <- $rdx
	#DEBUG_VALUE: IntegerToDecimalW:String <- $rdx
	add	rdx, 2
.Ltmp49:
	.p2align	4, 0x90
.LBB6_8:                                # =>This Inner Loop Header: Depth=1
	#DEBUG_VALUE: StringReverseW:left <- undef
	.cv_loc	7 1 42 0                # .\string.c:42:0
	movzx	r8d, word ptr [rdx - 2]
.Ltmp50:
	#DEBUG_VALUE: StringReverseW:c <- $r8w
	.cv_loc	7 1 43 0                # .\string.c:43:0
	movzx	ecx, word ptr [rax]
.Ltmp51:
	#DEBUG_VALUE: StringReverseW:left <- [DW_OP_plus_uconst 2, DW_OP_stack_value] undef
	mov	word ptr [rdx - 2], cx
.Ltmp52:
	#DEBUG_VALUE: StringReverseW:String <- [DW_OP_constu 2, DW_OP_minus, DW_OP_stack_value] $rax
	.cv_loc	7 1 44 0                # .\string.c:44:0
	mov	word ptr [rax], r8w
.Ltmp53:
	add	rax, -2
.Ltmp54:
	#DEBUG_VALUE: StringReverseW:String <- $rax
	.cv_loc	7 1 40 0                # .\string.c:40:0
	cmp	rdx, rax
	lea	rdx, [rdx + 2]
	jb	.LBB6_8
.Ltmp55:
.LBB6_9:
	.cv_loc	6 1 76 0                # .\string.c:76:0
	ret
.Ltmp56:
.Lfunc_end6:
                                        # -- End function
	.def	 IntegerToDecimalW64;
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",one_only,IntegerToDecimalW64
	.globl	IntegerToDecimalW64     # -- Begin function IntegerToDecimalW64
	.p2align	4, 0x90
IntegerToDecimalW64:                    # @IntegerToDecimalW64
.Lfunc_begin7:
	.cv_func_id 8
	.cv_loc	8 1 79 0                # .\string.c:79:0
# %bb.0:
	#DEBUG_VALUE: IntegerToDecimalW64:String <- $rdx
	#DEBUG_VALUE: IntegerToDecimalW64:String <- $rdx
	#DEBUG_VALUE: IntegerToDecimalW64:Value <- $rcx
	#DEBUG_VALUE: IntegerToDecimalW64:Value <- $ecx
	#DEBUG_VALUE: IntegerToDecimalW64:q <- $ecx
	#DEBUG_VALUE: IntegerToDecimalW64:i <- 0
	.cv_loc	8 1 82 0                # .\string.c:82:0
	test	ecx, ecx
	je	.LBB7_10
.Ltmp57:
# %bb.1:
	#DEBUG_VALUE: IntegerToDecimalW64:i <- 0
	#DEBUG_VALUE: IntegerToDecimalW64:q <- $ecx
	#DEBUG_VALUE: IntegerToDecimalW64:Value <- $ecx
	#DEBUG_VALUE: IntegerToDecimalW64:String <- $rdx
	xor	r9d, r9d
.Ltmp58:
	.p2align	4, 0x90
.LBB7_2:                                # =>This Inner Loop Header: Depth=1
	#DEBUG_VALUE: IntegerToDecimalW64:String <- $rdx
	#DEBUG_VALUE: IntegerToDecimalW64:q <- $ecx
	#DEBUG_VALUE: IntegerToDecimalW64:i <- $r9
	.cv_loc	8 1 83 0                # .\string.c:83:0
	movsxd	r8, ecx
	imul	r11, r8, 1717986919
	mov	r10, r11
	shr	r10, 63
	sar	r11, 34
	add	r11d, r10d
.Ltmp59:
	#DEBUG_VALUE: IntegerToDecimalW64:q <- $r11d
	lea	eax, [r11 + r11]
	lea	eax, [rax + 4*rax]
.Ltmp60:
	.cv_loc	8 1 86 0                # .\string.c:86:0
	neg	eax
	add	eax, ecx
	add	eax, 48
	mov	word ptr [rdx + 2*r9], ax
	add	r9, 1
.Ltmp61:
	#DEBUG_VALUE: r <- undef
	#DEBUG_VALUE: IntegerToDecimalW64:i <- $r9
	.cv_loc	8 1 83 0                # .\string.c:83:0
	add	r8d, 9
	mov	ecx, r11d
	cmp	r8d, 18
	ja	.LBB7_2
.Ltmp62:
# %bb.3:
	#DEBUG_VALUE: IntegerToDecimalW64:q <- $r11d
	#DEBUG_VALUE: IntegerToDecimalW64:i <- $r9
	#DEBUG_VALUE: IntegerToDecimalW64:String <- $rdx
	.cv_loc	8 1 88 0                # .\string.c:88:0
	mov	eax, r9d
	jmp	.LBB7_4
.Ltmp63:
.LBB7_10:
	#DEBUG_VALUE: IntegerToDecimalW64:i <- 0
	#DEBUG_VALUE: IntegerToDecimalW64:q <- $ecx
	#DEBUG_VALUE: IntegerToDecimalW64:Value <- $ecx
	#DEBUG_VALUE: IntegerToDecimalW64:String <- $rdx
	#DEBUG_VALUE: IntegerToDecimalW64:i <- 1
	.cv_loc	8 1 82 0                # .\string.c:82:0
	mov	word ptr [rdx], 48
	mov	eax, 1
.Ltmp64:
	#DEBUG_VALUE: IntegerToDecimalW64:i <- 0
	#DEBUG_VALUE: IntegerToDecimalW64:q <- undef
.LBB7_4:
	#DEBUG_VALUE: IntegerToDecimalW64:String <- $rdx
	#DEBUG_VALUE: IntegerToDecimalW64:i <- undef
	.cv_loc	8 1 88 0                # .\string.c:88:0
	mov	word ptr [rdx + 2*rax], 0
.Ltmp65:
	#DEBUG_VALUE: StringReverseW:left <- $rdx
	#DEBUG_VALUE: StringReverseW:String <- $rdx
	.cv_inline_site_id 9 within 8 inlined_at 1 89 0
	.cv_loc	9 1 38 0                # .\string.c:38:0
	lea	rax, [rdx - 4]
.Ltmp66:
	.p2align	4, 0x90
.LBB7_5:                                # =>This Inner Loop Header: Depth=1
	#DEBUG_VALUE: StringReverseW:String <- $rdx
	#DEBUG_VALUE: StringReverseW:left <- $rdx
	#DEBUG_VALUE: IntegerToDecimalW64:String <- $rdx
	#DEBUG_VALUE: StringReverseW:String <- undef
	#DEBUG_VALUE: StringReverseW:String <- [DW_OP_plus_uconst 2, DW_OP_stack_value] undef
	cmp	word ptr [rax + 4], 0
	lea	rax, [rax + 2]
	jne	.LBB7_5
.Ltmp67:
# %bb.6:
	#DEBUG_VALUE: StringReverseW:String <- $rdx
	#DEBUG_VALUE: StringReverseW:left <- $rdx
	#DEBUG_VALUE: IntegerToDecimalW64:String <- $rdx
	#DEBUG_VALUE: StringReverseW:String <- undef
	#DEBUG_VALUE: StringReverseW:left <- $rdx
	.cv_loc	9 1 40 0                # .\string.c:40:0
	cmp	rax, rdx
	jbe	.LBB7_9
.Ltmp68:
# %bb.7:
	#DEBUG_VALUE: StringReverseW:String <- $rdx
	#DEBUG_VALUE: StringReverseW:left <- $rdx
	#DEBUG_VALUE: IntegerToDecimalW64:String <- $rdx
	add	rdx, 2
.Ltmp69:
	.p2align	4, 0x90
.LBB7_8:                                # =>This Inner Loop Header: Depth=1
	#DEBUG_VALUE: StringReverseW:left <- undef
	.cv_loc	9 1 42 0                # .\string.c:42:0
	movzx	r8d, word ptr [rdx - 2]
.Ltmp70:
	#DEBUG_VALUE: StringReverseW:c <- $r8w
	.cv_loc	9 1 43 0                # .\string.c:43:0
	movzx	ecx, word ptr [rax]
.Ltmp71:
	#DEBUG_VALUE: StringReverseW:left <- [DW_OP_plus_uconst 2, DW_OP_stack_value] undef
	mov	word ptr [rdx - 2], cx
.Ltmp72:
	#DEBUG_VALUE: StringReverseW:String <- [DW_OP_constu 2, DW_OP_minus, DW_OP_stack_value] $rax
	.cv_loc	9 1 44 0                # .\string.c:44:0
	mov	word ptr [rax], r8w
.Ltmp73:
	add	rax, -2
.Ltmp74:
	#DEBUG_VALUE: StringReverseW:String <- $rax
	.cv_loc	9 1 40 0                # .\string.c:40:0
	cmp	rdx, rax
	lea	rdx, [rdx + 2]
	jb	.LBB7_8
.Ltmp75:
.LBB7_9:
	.cv_loc	8 1 90 0                # .\string.c:90:0
	ret
.Ltmp76:
.Lfunc_end7:
                                        # -- End function
	.def	 IntegerToHexW;
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",one_only,IntegerToHexW
	.globl	IntegerToHexW           # -- Begin function IntegerToHexW
	.p2align	4, 0x90
IntegerToHexW:                          # @IntegerToHexW
.Lfunc_begin8:
	.cv_func_id 10
	.cv_loc	10 1 93 0               # .\string.c:93:0
# %bb.0:
	#DEBUG_VALUE: IntegerToHexW:String <- $rdx
	#DEBUG_VALUE: IntegerToHexW:String <- $rdx
	#DEBUG_VALUE: IntegerToHexW:Value <- $ecx
	#DEBUG_VALUE: IntegerToHexW:Value <- $ecx
	#DEBUG_VALUE: IntegerToHexW:q <- $ecx
	#DEBUG_VALUE: IntegerToHexW:q <- $ecx
	#DEBUG_VALUE: IntegerToHexW:i <- 0
	.cv_loc	10 1 97 0               # .\string.c:97:0
	test	ecx, ecx
	je	.LBB8_10
.Ltmp77:
# %bb.1:
	#DEBUG_VALUE: IntegerToHexW:i <- 0
	#DEBUG_VALUE: IntegerToHexW:q <- $ecx
	#DEBUG_VALUE: IntegerToHexW:Value <- $ecx
	#DEBUG_VALUE: IntegerToHexW:String <- $rdx
	xor	r9d, r9d
	lea	r8, [rip + .L__const.IntegerToHexW64.hp]
.Ltmp78:
	.p2align	4, 0x90
.LBB8_2:                                # =>This Inner Loop Header: Depth=1
	#DEBUG_VALUE: IntegerToHexW:q <- $ecx
	#DEBUG_VALUE: IntegerToHexW:String <- $rdx
	#DEBUG_VALUE: IntegerToHexW:q <- $ecx
	#DEBUG_VALUE: IntegerToHexW:i <- $r9
	.cv_loc	10 1 100 0              # .\string.c:100:0
	mov	eax, ecx
	and	eax, 15
.Ltmp79:
	#DEBUG_VALUE: r <- $eax
	.cv_loc	10 1 101 0              # .\string.c:101:0
	movzx	eax, word ptr [r8 + 2*rax]
.Ltmp80:
	mov	word ptr [rdx + 2*r9], ax
	add	r9, 1
.Ltmp81:
	#DEBUG_VALUE: IntegerToHexW:i <- $r9
	.cv_loc	10 1 98 0               # .\string.c:98:0
	sar	ecx, 4
.Ltmp82:
	#DEBUG_VALUE: IntegerToHexW:q <- $ecx
	.cv_loc	10 1 98 0               # .\string.c:98:0
	jne	.LBB8_2
.Ltmp83:
# %bb.3:
	#DEBUG_VALUE: IntegerToHexW:i <- $r9
	#DEBUG_VALUE: IntegerToHexW:q <- $ecx
	#DEBUG_VALUE: IntegerToHexW:String <- $rdx
	.cv_loc	10 1 103 0              # .\string.c:103:0
	mov	eax, r9d
	jmp	.LBB8_4
.Ltmp84:
.LBB8_10:
	#DEBUG_VALUE: IntegerToHexW:i <- 0
	#DEBUG_VALUE: IntegerToHexW:q <- $ecx
	#DEBUG_VALUE: IntegerToHexW:Value <- $ecx
	#DEBUG_VALUE: IntegerToHexW:String <- $rdx
	#DEBUG_VALUE: IntegerToHexW:i <- 1
	.cv_loc	10 1 97 0               # .\string.c:97:0
	mov	word ptr [rdx], 48
	mov	eax, 1
.Ltmp85:
	#DEBUG_VALUE: IntegerToHexW:i <- 0
	#DEBUG_VALUE: IntegerToHexW:q <- undef
.LBB8_4:
	#DEBUG_VALUE: IntegerToHexW:q <- $ecx
	#DEBUG_VALUE: IntegerToHexW:String <- $rdx
	#DEBUG_VALUE: IntegerToHexW:i <- undef
	.cv_loc	10 1 103 0              # .\string.c:103:0
	mov	word ptr [rdx + 2*rax], 0
.Ltmp86:
	#DEBUG_VALUE: StringReverseW:left <- $rdx
	#DEBUG_VALUE: StringReverseW:String <- $rdx
	.cv_inline_site_id 11 within 10 inlined_at 1 104 0
	.cv_loc	11 1 38 0               # .\string.c:38:0
	lea	rax, [rdx - 4]
.Ltmp87:
	.p2align	4, 0x90
.LBB8_5:                                # =>This Inner Loop Header: Depth=1
	#DEBUG_VALUE: StringReverseW:String <- $rdx
	#DEBUG_VALUE: StringReverseW:left <- $rdx
	#DEBUG_VALUE: IntegerToHexW:q <- $ecx
	#DEBUG_VALUE: IntegerToHexW:String <- $rdx
	#DEBUG_VALUE: StringReverseW:String <- undef
	#DEBUG_VALUE: StringReverseW:String <- [DW_OP_plus_uconst 2, DW_OP_stack_value] undef
	cmp	word ptr [rax + 4], 0
	lea	rax, [rax + 2]
	jne	.LBB8_5
.Ltmp88:
# %bb.6:
	#DEBUG_VALUE: StringReverseW:String <- $rdx
	#DEBUG_VALUE: StringReverseW:left <- $rdx
	#DEBUG_VALUE: IntegerToHexW:q <- $ecx
	#DEBUG_VALUE: IntegerToHexW:String <- $rdx
	#DEBUG_VALUE: StringReverseW:String <- undef
	#DEBUG_VALUE: StringReverseW:left <- $rdx
	.cv_loc	11 1 40 0               # .\string.c:40:0
	cmp	rax, rdx
	jbe	.LBB8_9
.Ltmp89:
# %bb.7:
	#DEBUG_VALUE: StringReverseW:String <- $rdx
	#DEBUG_VALUE: StringReverseW:left <- $rdx
	#DEBUG_VALUE: IntegerToHexW:q <- $ecx
	#DEBUG_VALUE: IntegerToHexW:String <- $rdx
	add	rdx, 2
.Ltmp90:
	.p2align	4, 0x90
.LBB8_8:                                # =>This Inner Loop Header: Depth=1
	#DEBUG_VALUE: StringReverseW:left <- undef
	.cv_loc	11 1 42 0               # .\string.c:42:0
	movzx	r8d, word ptr [rdx - 2]
.Ltmp91:
	#DEBUG_VALUE: StringReverseW:c <- $r8w
	.cv_loc	11 1 43 0               # .\string.c:43:0
	movzx	ecx, word ptr [rax]
.Ltmp92:
	#DEBUG_VALUE: StringReverseW:left <- [DW_OP_plus_uconst 2, DW_OP_stack_value] undef
	mov	word ptr [rdx - 2], cx
.Ltmp93:
	#DEBUG_VALUE: StringReverseW:String <- [DW_OP_constu 2, DW_OP_minus, DW_OP_stack_value] $rax
	.cv_loc	11 1 44 0               # .\string.c:44:0
	mov	word ptr [rax], r8w
.Ltmp94:
	add	rax, -2
.Ltmp95:
	#DEBUG_VALUE: StringReverseW:String <- $rax
	.cv_loc	11 1 40 0               # .\string.c:40:0
	cmp	rdx, rax
	lea	rdx, [rdx + 2]
	jb	.LBB8_8
.Ltmp96:
.LBB8_9:
	.cv_loc	10 1 105 0              # .\string.c:105:0
	ret
.Ltmp97:
.Lfunc_end8:
                                        # -- End function
	.def	 IntegerToHexW64;
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",one_only,IntegerToHexW64
	.globl	IntegerToHexW64         # -- Begin function IntegerToHexW64
	.p2align	4, 0x90
IntegerToHexW64:                        # @IntegerToHexW64
.Lfunc_begin9:
	.cv_func_id 12
	.cv_loc	12 1 108 0              # .\string.c:108:0
# %bb.0:
	#DEBUG_VALUE: IntegerToHexW64:String <- $rdx
	#DEBUG_VALUE: IntegerToHexW64:String <- $rdx
	#DEBUG_VALUE: IntegerToHexW64:Value <- $rcx
	#DEBUG_VALUE: IntegerToHexW64:Value <- $ecx
	#DEBUG_VALUE: IntegerToHexW64:q <- $ecx
	#DEBUG_VALUE: IntegerToHexW64:i <- 0
	.cv_loc	12 1 112 0              # .\string.c:112:0
	test	ecx, ecx
	je	.LBB9_10
.Ltmp98:
# %bb.1:
	#DEBUG_VALUE: IntegerToHexW64:i <- 0
	#DEBUG_VALUE: IntegerToHexW64:q <- $ecx
	#DEBUG_VALUE: IntegerToHexW64:Value <- $ecx
	#DEBUG_VALUE: IntegerToHexW64:String <- $rdx
	xor	r9d, r9d
	lea	r8, [rip + .L__const.IntegerToHexW64.hp]
.Ltmp99:
	.p2align	4, 0x90
.LBB9_2:                                # =>This Inner Loop Header: Depth=1
	#DEBUG_VALUE: IntegerToHexW64:q <- $ecx
	#DEBUG_VALUE: IntegerToHexW64:String <- $rdx
	#DEBUG_VALUE: IntegerToHexW64:q <- $ecx
	#DEBUG_VALUE: IntegerToHexW64:i <- $r9
	.cv_loc	12 1 115 0              # .\string.c:115:0
	mov	eax, ecx
	and	eax, 15
.Ltmp100:
	#DEBUG_VALUE: r <- $eax
	.cv_loc	12 1 116 0              # .\string.c:116:0
	movzx	eax, word ptr [r8 + 2*rax]
.Ltmp101:
	mov	word ptr [rdx + 2*r9], ax
	add	r9, 1
.Ltmp102:
	#DEBUG_VALUE: IntegerToHexW64:i <- $r9
	.cv_loc	12 1 113 0              # .\string.c:113:0
	sar	ecx, 4
.Ltmp103:
	#DEBUG_VALUE: IntegerToHexW64:q <- $ecx
	.cv_loc	12 1 113 0              # .\string.c:113:0
	jne	.LBB9_2
.Ltmp104:
# %bb.3:
	#DEBUG_VALUE: IntegerToHexW64:i <- $r9
	#DEBUG_VALUE: IntegerToHexW64:q <- $ecx
	#DEBUG_VALUE: IntegerToHexW64:String <- $rdx
	.cv_loc	12 1 118 0              # .\string.c:118:0
	mov	eax, r9d
	jmp	.LBB9_4
.Ltmp105:
.LBB9_10:
	#DEBUG_VALUE: IntegerToHexW64:i <- 0
	#DEBUG_VALUE: IntegerToHexW64:q <- $ecx
	#DEBUG_VALUE: IntegerToHexW64:Value <- $ecx
	#DEBUG_VALUE: IntegerToHexW64:String <- $rdx
	#DEBUG_VALUE: IntegerToHexW64:i <- 1
	.cv_loc	12 1 112 0              # .\string.c:112:0
	mov	word ptr [rdx], 48
	mov	eax, 1
.Ltmp106:
	#DEBUG_VALUE: IntegerToHexW64:i <- 0
	#DEBUG_VALUE: IntegerToHexW64:q <- undef
.LBB9_4:
	#DEBUG_VALUE: IntegerToHexW64:q <- $ecx
	#DEBUG_VALUE: IntegerToHexW64:String <- $rdx
	#DEBUG_VALUE: IntegerToHexW64:i <- undef
	.cv_loc	12 1 118 0              # .\string.c:118:0
	mov	word ptr [rdx + 2*rax], 0
.Ltmp107:
	#DEBUG_VALUE: StringReverseW:left <- $rdx
	#DEBUG_VALUE: StringReverseW:String <- $rdx
	.cv_inline_site_id 13 within 12 inlined_at 1 119 0
	.cv_loc	13 1 38 0               # .\string.c:38:0
	lea	rax, [rdx - 4]
.Ltmp108:
	.p2align	4, 0x90
.LBB9_5:                                # =>This Inner Loop Header: Depth=1
	#DEBUG_VALUE: StringReverseW:String <- $rdx
	#DEBUG_VALUE: StringReverseW:left <- $rdx
	#DEBUG_VALUE: IntegerToHexW64:q <- $ecx
	#DEBUG_VALUE: IntegerToHexW64:String <- $rdx
	#DEBUG_VALUE: StringReverseW:String <- undef
	#DEBUG_VALUE: StringReverseW:String <- [DW_OP_plus_uconst 2, DW_OP_stack_value] undef
	cmp	word ptr [rax + 4], 0
	lea	rax, [rax + 2]
	jne	.LBB9_5
.Ltmp109:
# %bb.6:
	#DEBUG_VALUE: StringReverseW:String <- $rdx
	#DEBUG_VALUE: StringReverseW:left <- $rdx
	#DEBUG_VALUE: IntegerToHexW64:q <- $ecx
	#DEBUG_VALUE: IntegerToHexW64:String <- $rdx
	#DEBUG_VALUE: StringReverseW:String <- undef
	#DEBUG_VALUE: StringReverseW:left <- $rdx
	.cv_loc	13 1 40 0               # .\string.c:40:0
	cmp	rax, rdx
	jbe	.LBB9_9
.Ltmp110:
# %bb.7:
	#DEBUG_VALUE: StringReverseW:String <- $rdx
	#DEBUG_VALUE: StringReverseW:left <- $rdx
	#DEBUG_VALUE: IntegerToHexW64:q <- $ecx
	#DEBUG_VALUE: IntegerToHexW64:String <- $rdx
	add	rdx, 2
.Ltmp111:
	.p2align	4, 0x90
.LBB9_8:                                # =>This Inner Loop Header: Depth=1
	#DEBUG_VALUE: StringReverseW:left <- undef
	.cv_loc	13 1 42 0               # .\string.c:42:0
	movzx	r8d, word ptr [rdx - 2]
.Ltmp112:
	#DEBUG_VALUE: StringReverseW:c <- $r8w
	.cv_loc	13 1 43 0               # .\string.c:43:0
	movzx	ecx, word ptr [rax]
.Ltmp113:
	#DEBUG_VALUE: StringReverseW:left <- [DW_OP_plus_uconst 2, DW_OP_stack_value] undef
	mov	word ptr [rdx - 2], cx
.Ltmp114:
	#DEBUG_VALUE: StringReverseW:String <- [DW_OP_constu 2, DW_OP_minus, DW_OP_stack_value] $rax
	.cv_loc	13 1 44 0               # .\string.c:44:0
	mov	word ptr [rax], r8w
.Ltmp115:
	add	rax, -2
.Ltmp116:
	#DEBUG_VALUE: StringReverseW:String <- $rax
	.cv_loc	13 1 40 0               # .\string.c:40:0
	cmp	rdx, rax
	lea	rdx, [rdx + 2]
	jb	.LBB9_8
.Ltmp117:
.LBB9_9:
	.cv_loc	12 1 120 0              # .\string.c:120:0
	ret
.Ltmp118:
.Lfunc_end9:
                                        # -- End function
	.def	 IntegerToHEXW;
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",one_only,IntegerToHEXW
	.globl	IntegerToHEXW           # -- Begin function IntegerToHEXW
	.p2align	4, 0x90
IntegerToHEXW:                          # @IntegerToHEXW
.Lfunc_begin10:
	.cv_func_id 14
	.cv_loc	14 1 123 0              # .\string.c:123:0
# %bb.0:
	#DEBUG_VALUE: IntegerToHEXW:String <- $rdx
	#DEBUG_VALUE: IntegerToHEXW:String <- $rdx
	#DEBUG_VALUE: IntegerToHEXW:Value <- $ecx
	#DEBUG_VALUE: IntegerToHEXW:Value <- $ecx
	#DEBUG_VALUE: IntegerToHEXW:q <- $ecx
	#DEBUG_VALUE: IntegerToHEXW:q <- $ecx
	#DEBUG_VALUE: IntegerToHEXW:i <- 0
	.cv_loc	14 1 127 0              # .\string.c:127:0
	test	ecx, ecx
	je	.LBB10_10
.Ltmp119:
# %bb.1:
	#DEBUG_VALUE: IntegerToHEXW:i <- 0
	#DEBUG_VALUE: IntegerToHEXW:q <- $ecx
	#DEBUG_VALUE: IntegerToHEXW:Value <- $ecx
	#DEBUG_VALUE: IntegerToHEXW:String <- $rdx
	xor	r9d, r9d
	lea	r8, [rip + .L__const.IntegerToHEXW64.hp]
.Ltmp120:
	.p2align	4, 0x90
.LBB10_2:                               # =>This Inner Loop Header: Depth=1
	#DEBUG_VALUE: IntegerToHEXW:q <- $ecx
	#DEBUG_VALUE: IntegerToHEXW:String <- $rdx
	#DEBUG_VALUE: IntegerToHEXW:q <- $ecx
	#DEBUG_VALUE: IntegerToHEXW:i <- $r9
	.cv_loc	14 1 130 0              # .\string.c:130:0
	mov	eax, ecx
	and	eax, 15
.Ltmp121:
	#DEBUG_VALUE: r <- $eax
	.cv_loc	14 1 131 0              # .\string.c:131:0
	movzx	eax, word ptr [r8 + 2*rax]
.Ltmp122:
	mov	word ptr [rdx + 2*r9], ax
	add	r9, 1
.Ltmp123:
	#DEBUG_VALUE: IntegerToHEXW:i <- $r9
	.cv_loc	14 1 128 0              # .\string.c:128:0
	sar	ecx, 4
.Ltmp124:
	#DEBUG_VALUE: IntegerToHEXW:q <- $ecx
	.cv_loc	14 1 128 0              # .\string.c:128:0
	jne	.LBB10_2
.Ltmp125:
# %bb.3:
	#DEBUG_VALUE: IntegerToHEXW:i <- $r9
	#DEBUG_VALUE: IntegerToHEXW:q <- $ecx
	#DEBUG_VALUE: IntegerToHEXW:String <- $rdx
	.cv_loc	14 1 133 0              # .\string.c:133:0
	mov	eax, r9d
	jmp	.LBB10_4
.Ltmp126:
.LBB10_10:
	#DEBUG_VALUE: IntegerToHEXW:i <- 0
	#DEBUG_VALUE: IntegerToHEXW:q <- $ecx
	#DEBUG_VALUE: IntegerToHEXW:Value <- $ecx
	#DEBUG_VALUE: IntegerToHEXW:String <- $rdx
	#DEBUG_VALUE: IntegerToHEXW:i <- 1
	.cv_loc	14 1 127 0              # .\string.c:127:0
	mov	word ptr [rdx], 48
	mov	eax, 1
.Ltmp127:
	#DEBUG_VALUE: IntegerToHEXW:i <- 0
	#DEBUG_VALUE: IntegerToHEXW:q <- undef
.LBB10_4:
	#DEBUG_VALUE: IntegerToHEXW:q <- $ecx
	#DEBUG_VALUE: IntegerToHEXW:String <- $rdx
	#DEBUG_VALUE: IntegerToHEXW:i <- undef
	.cv_loc	14 1 133 0              # .\string.c:133:0
	mov	word ptr [rdx + 2*rax], 0
.Ltmp128:
	#DEBUG_VALUE: StringReverseW:left <- $rdx
	#DEBUG_VALUE: StringReverseW:String <- $rdx
	.cv_inline_site_id 15 within 14 inlined_at 1 134 0
	.cv_loc	15 1 38 0               # .\string.c:38:0
	lea	rax, [rdx - 4]
.Ltmp129:
	.p2align	4, 0x90
.LBB10_5:                               # =>This Inner Loop Header: Depth=1
	#DEBUG_VALUE: StringReverseW:String <- $rdx
	#DEBUG_VALUE: StringReverseW:left <- $rdx
	#DEBUG_VALUE: IntegerToHEXW:q <- $ecx
	#DEBUG_VALUE: IntegerToHEXW:String <- $rdx
	#DEBUG_VALUE: StringReverseW:String <- undef
	#DEBUG_VALUE: StringReverseW:String <- [DW_OP_plus_uconst 2, DW_OP_stack_value] undef
	cmp	word ptr [rax + 4], 0
	lea	rax, [rax + 2]
	jne	.LBB10_5
.Ltmp130:
# %bb.6:
	#DEBUG_VALUE: StringReverseW:String <- $rdx
	#DEBUG_VALUE: StringReverseW:left <- $rdx
	#DEBUG_VALUE: IntegerToHEXW:q <- $ecx
	#DEBUG_VALUE: IntegerToHEXW:String <- $rdx
	#DEBUG_VALUE: StringReverseW:String <- undef
	#DEBUG_VALUE: StringReverseW:left <- $rdx
	.cv_loc	15 1 40 0               # .\string.c:40:0
	cmp	rax, rdx
	jbe	.LBB10_9
.Ltmp131:
# %bb.7:
	#DEBUG_VALUE: StringReverseW:String <- $rdx
	#DEBUG_VALUE: StringReverseW:left <- $rdx
	#DEBUG_VALUE: IntegerToHEXW:q <- $ecx
	#DEBUG_VALUE: IntegerToHEXW:String <- $rdx
	add	rdx, 2
.Ltmp132:
	.p2align	4, 0x90
.LBB10_8:                               # =>This Inner Loop Header: Depth=1
	#DEBUG_VALUE: StringReverseW:left <- undef
	.cv_loc	15 1 42 0               # .\string.c:42:0
	movzx	r8d, word ptr [rdx - 2]
.Ltmp133:
	#DEBUG_VALUE: StringReverseW:c <- $r8w
	.cv_loc	15 1 43 0               # .\string.c:43:0
	movzx	ecx, word ptr [rax]
.Ltmp134:
	#DEBUG_VALUE: StringReverseW:left <- [DW_OP_plus_uconst 2, DW_OP_stack_value] undef
	mov	word ptr [rdx - 2], cx
.Ltmp135:
	#DEBUG_VALUE: StringReverseW:String <- [DW_OP_constu 2, DW_OP_minus, DW_OP_stack_value] $rax
	.cv_loc	15 1 44 0               # .\string.c:44:0
	mov	word ptr [rax], r8w
.Ltmp136:
	add	rax, -2
.Ltmp137:
	#DEBUG_VALUE: StringReverseW:String <- $rax
	.cv_loc	15 1 40 0               # .\string.c:40:0
	cmp	rdx, rax
	lea	rdx, [rdx + 2]
	jb	.LBB10_8
.Ltmp138:
.LBB10_9:
	.cv_loc	14 1 135 0              # .\string.c:135:0
	ret
.Ltmp139:
.Lfunc_end10:
                                        # -- End function
	.def	 IntegerToHEXW64;
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",one_only,IntegerToHEXW64
	.globl	IntegerToHEXW64         # -- Begin function IntegerToHEXW64
	.p2align	4, 0x90
IntegerToHEXW64:                        # @IntegerToHEXW64
.Lfunc_begin11:
	.cv_func_id 16
	.cv_loc	16 1 138 0              # .\string.c:138:0
# %bb.0:
	#DEBUG_VALUE: IntegerToHEXW64:String <- $rdx
	#DEBUG_VALUE: IntegerToHEXW64:String <- $rdx
	#DEBUG_VALUE: IntegerToHEXW64:Value <- $rcx
	#DEBUG_VALUE: IntegerToHEXW64:Value <- $rcx
	#DEBUG_VALUE: IntegerToHEXW64:q <- $rcx
	#DEBUG_VALUE: IntegerToHEXW64:q <- $rcx
	#DEBUG_VALUE: IntegerToHEXW64:i <- 0
	.cv_loc	16 1 142 0              # .\string.c:142:0
	test	rcx, rcx
	je	.LBB11_10
.Ltmp140:
# %bb.1:
	#DEBUG_VALUE: IntegerToHEXW64:i <- 0
	#DEBUG_VALUE: IntegerToHEXW64:q <- $rcx
	#DEBUG_VALUE: IntegerToHEXW64:Value <- $rcx
	#DEBUG_VALUE: IntegerToHEXW64:String <- $rdx
	xor	r9d, r9d
	lea	r8, [rip + .L__const.IntegerToHEXW64.hp]
.Ltmp141:
	.p2align	4, 0x90
.LBB11_2:                               # =>This Inner Loop Header: Depth=1
	#DEBUG_VALUE: IntegerToHEXW64:q <- $rcx
	#DEBUG_VALUE: IntegerToHEXW64:String <- $rdx
	#DEBUG_VALUE: IntegerToHEXW64:q <- $rcx
	#DEBUG_VALUE: IntegerToHEXW64:i <- $r9
	.cv_loc	16 1 145 0              # .\string.c:145:0
	mov	eax, ecx
	and	eax, 15
.Ltmp142:
	#DEBUG_VALUE: r <- $rax
	.cv_loc	16 1 146 0              # .\string.c:146:0
	movzx	eax, word ptr [r8 + 2*rax]
.Ltmp143:
	mov	word ptr [rdx + 2*r9], ax
	add	r9, 1
.Ltmp144:
	#DEBUG_VALUE: IntegerToHEXW64:i <- $r9
	.cv_loc	16 1 143 0              # .\string.c:143:0
	sar	rcx, 4
.Ltmp145:
	#DEBUG_VALUE: IntegerToHEXW64:q <- $rcx
	.cv_loc	16 1 143 0              # .\string.c:143:0
	jne	.LBB11_2
.Ltmp146:
# %bb.3:
	#DEBUG_VALUE: IntegerToHEXW64:i <- $r9
	#DEBUG_VALUE: IntegerToHEXW64:q <- $rcx
	#DEBUG_VALUE: IntegerToHEXW64:String <- $rdx
	.cv_loc	16 1 148 0              # .\string.c:148:0
	mov	eax, r9d
	jmp	.LBB11_4
.Ltmp147:
.LBB11_10:
	#DEBUG_VALUE: IntegerToHEXW64:i <- 0
	#DEBUG_VALUE: IntegerToHEXW64:q <- $rcx
	#DEBUG_VALUE: IntegerToHEXW64:Value <- $rcx
	#DEBUG_VALUE: IntegerToHEXW64:String <- $rdx
	#DEBUG_VALUE: IntegerToHEXW64:i <- 1
	.cv_loc	16 1 142 0              # .\string.c:142:0
	mov	word ptr [rdx], 48
	mov	eax, 1
.Ltmp148:
	#DEBUG_VALUE: IntegerToHEXW64:i <- 0
	#DEBUG_VALUE: IntegerToHEXW64:q <- undef
.LBB11_4:
	#DEBUG_VALUE: IntegerToHEXW64:q <- $rcx
	#DEBUG_VALUE: IntegerToHEXW64:String <- $rdx
	#DEBUG_VALUE: IntegerToHEXW64:i <- undef
	.cv_loc	16 1 148 0              # .\string.c:148:0
	mov	word ptr [rdx + 2*rax], 0
.Ltmp149:
	#DEBUG_VALUE: StringReverseW:left <- $rdx
	#DEBUG_VALUE: StringReverseW:String <- $rdx
	.cv_inline_site_id 17 within 16 inlined_at 1 149 0
	.cv_loc	17 1 38 0               # .\string.c:38:0
	lea	rax, [rdx - 4]
.Ltmp150:
	.p2align	4, 0x90
.LBB11_5:                               # =>This Inner Loop Header: Depth=1
	#DEBUG_VALUE: StringReverseW:String <- $rdx
	#DEBUG_VALUE: StringReverseW:left <- $rdx
	#DEBUG_VALUE: IntegerToHEXW64:q <- $rcx
	#DEBUG_VALUE: IntegerToHEXW64:String <- $rdx
	#DEBUG_VALUE: StringReverseW:String <- undef
	#DEBUG_VALUE: StringReverseW:String <- [DW_OP_plus_uconst 2, DW_OP_stack_value] undef
	cmp	word ptr [rax + 4], 0
	lea	rax, [rax + 2]
	jne	.LBB11_5
.Ltmp151:
# %bb.6:
	#DEBUG_VALUE: StringReverseW:String <- $rdx
	#DEBUG_VALUE: StringReverseW:left <- $rdx
	#DEBUG_VALUE: IntegerToHEXW64:q <- $rcx
	#DEBUG_VALUE: IntegerToHEXW64:String <- $rdx
	#DEBUG_VALUE: StringReverseW:String <- undef
	#DEBUG_VALUE: StringReverseW:left <- $rdx
	.cv_loc	17 1 40 0               # .\string.c:40:0
	cmp	rax, rdx
	jbe	.LBB11_9
.Ltmp152:
# %bb.7:
	#DEBUG_VALUE: StringReverseW:String <- $rdx
	#DEBUG_VALUE: StringReverseW:left <- $rdx
	#DEBUG_VALUE: IntegerToHEXW64:q <- $rcx
	#DEBUG_VALUE: IntegerToHEXW64:String <- $rdx
	add	rdx, 2
.Ltmp153:
	.p2align	4, 0x90
.LBB11_8:                               # =>This Inner Loop Header: Depth=1
	#DEBUG_VALUE: StringReverseW:left <- undef
	.cv_loc	17 1 42 0               # .\string.c:42:0
	movzx	r8d, word ptr [rdx - 2]
.Ltmp154:
	#DEBUG_VALUE: StringReverseW:c <- $r8w
	.cv_loc	17 1 43 0               # .\string.c:43:0
	movzx	ecx, word ptr [rax]
.Ltmp155:
	#DEBUG_VALUE: StringReverseW:left <- [DW_OP_plus_uconst 2, DW_OP_stack_value] undef
	mov	word ptr [rdx - 2], cx
.Ltmp156:
	#DEBUG_VALUE: StringReverseW:String <- [DW_OP_constu 2, DW_OP_minus, DW_OP_stack_value] $rax
	.cv_loc	17 1 44 0               # .\string.c:44:0
	mov	word ptr [rax], r8w
.Ltmp157:
	add	rax, -2
.Ltmp158:
	#DEBUG_VALUE: StringReverseW:String <- $rax
	.cv_loc	17 1 40 0               # .\string.c:40:0
	cmp	rdx, rax
	lea	rdx, [rdx + 2]
	jb	.LBB11_8
.Ltmp159:
.LBB11_9:
	.cv_loc	16 1 150 0              # .\string.c:150:0
	ret
.Ltmp160:
.Lfunc_end11:
                                        # -- End function
	.section	.rdata,"dr"
	.p2align	4               # @__const.IntegerToHexW64.hp
.L__const.IntegerToHexW64.hp:
	.short	48                      # 0x30
	.short	49                      # 0x31
	.short	50                      # 0x32
	.short	51                      # 0x33
	.short	52                      # 0x34
	.short	53                      # 0x35
	.short	54                      # 0x36
	.short	55                      # 0x37
	.short	56                      # 0x38
	.short	57                      # 0x39
	.short	97                      # 0x61
	.short	98                      # 0x62
	.short	99                      # 0x63
	.short	100                     # 0x64
	.short	101                     # 0x65
	.short	102                     # 0x66

	.p2align	4               # @__const.IntegerToHEXW64.hp
.L__const.IntegerToHEXW64.hp:
	.short	48                      # 0x30
	.short	49                      # 0x31
	.short	50                      # 0x32
	.short	51                      # 0x33
	.short	52                      # 0x34
	.short	53                      # 0x35
	.short	54                      # 0x36
	.short	55                      # 0x37
	.short	56                      # 0x38
	.short	57                      # 0x39
	.short	65                      # 0x41
	.short	66                      # 0x42
	.short	67                      # 0x43
	.short	68                      # 0x44
	.short	69                      # 0x45
	.short	70                      # 0x46

	.section	.drectve,"yn"
	.ascii	" /DEFAULTLIB:libcmt.lib"
	.ascii	" /DEFAULTLIB:oldnames.lib"
	.section	.debug$S,"dr"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241
	.long	.Ltmp162-.Ltmp161       # Subsection size
.Ltmp161:
	.short	.Ltmp164-.Ltmp163       # Record length
.Ltmp163:
	.short	4412                    # Record kind: S_COMPILE3
	.long	0                       # Flags and language
	.short	208                     # CPUType
	.short	10                      # Frontend version
	.short	0
	.short	0
	.short	0
	.short	10000                   # Backend version
	.short	0
	.short	0
	.short	0
	.asciz	"clang version 10.0.0 " # Null-terminated compiler version string
	.p2align	2
.Ltmp164:
.Ltmp162:
	.p2align	2
	.long	246                     # Inlinee lines subsection
	.long	.Ltmp166-.Ltmp165       # Subsection size
.Ltmp165:
	.long	0                       # Inlinee lines signature

                                        # Inlined function StringReverseW starts at .\string.c:34
	.long	4098                    # Type index of inlined function
	.cv_filechecksumoffset	1       # Offset into filechecksum table
	.long	34                      # Starting line number
.Ltmp166:
	.p2align	2
	.section	.debug$S,"dr",associative,FillMemory
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for FillMemory
	.long	.Ltmp168-.Ltmp167       # Subsection size
.Ltmp167:
	.short	.Ltmp170-.Ltmp169       # Record length
.Ltmp169:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end0-FillMemory  # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	4101                    # Function type index
	.secrel32	FillMemory      # Function section relative address
	.secidx	FillMemory              # Function section index
	.byte	0                       # Flags
	.asciz	"FillMemory"            # Function name
	.p2align	2
.Ltmp170:
	.short	.Ltmp172-.Ltmp171       # Record length
.Ltmp171:
	.short	4114                    # Record kind: S_FRAMEPROC
	.long	0                       # FrameSize
	.long	0                       # Padding
	.long	0                       # Offset of padding
	.long	0                       # Bytes of callee saved registers
	.long	0                       # Exception handler offset
	.short	0                       # Exception handler section
	.long	1048576                 # Flags (defines frame register)
	.p2align	2
.Ltmp172:
	.short	.Ltmp174-.Ltmp173       # Record length
.Ltmp173:
	.short	4414                    # Record kind: S_LOCAL
	.long	1539                    # TypeIndex
	.short	1                       # Flags
	.asciz	"Buffer"
	.p2align	2
.Ltmp174:
	.cv_def_range	 .Lfunc_begin0 .Ltmp3, reg, 330
	.short	.Ltmp176-.Ltmp175       # Record length
.Ltmp175:
	.short	4414                    # Record kind: S_LOCAL
	.long	32                      # TypeIndex
	.short	1                       # Flags
	.asciz	"Value"
	.p2align	2
.Ltmp176:
	.cv_def_range	 .Lfunc_begin0 .Ltmp0, reg, 3
	.cv_def_range	 .Ltmp0 .Ltmp2, reg, 345
	.cv_def_range	 .Ltmp2 .Ltmp3, reg, 344
	.short	.Ltmp178-.Ltmp177       # Record length
.Ltmp177:
	.short	4414                    # Record kind: S_LOCAL
	.long	35                      # TypeIndex
	.short	1                       # Flags
	.asciz	"Size"
	.p2align	2
.Ltmp178:
	.cv_def_range	 .Lfunc_begin0 .Ltmp1, reg, 336
	.cv_def_range	 .Ltmp1 .Ltmp3, reg, 331
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp168:
	.p2align	2
	.cv_linetable	0, FillMemory, .Lfunc_end0
	.section	.debug$S,"dr",associative,StringAnsiToUnicode
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for StringAnsiToUnicode
	.long	.Ltmp180-.Ltmp179       # Subsection size
.Ltmp179:
	.short	.Ltmp182-.Ltmp181       # Record length
.Ltmp181:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end1-StringAnsiToUnicode # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	4104                    # Function type index
	.secrel32	StringAnsiToUnicode # Function section relative address
	.secidx	StringAnsiToUnicode     # Function section index
	.byte	0                       # Flags
	.asciz	"StringAnsiToUnicode"   # Function name
	.p2align	2
.Ltmp182:
	.short	.Ltmp184-.Ltmp183       # Record length
.Ltmp183:
	.short	4114                    # Record kind: S_FRAMEPROC
	.long	0                       # FrameSize
	.long	0                       # Padding
	.long	0                       # Offset of padding
	.long	0                       # Bytes of callee saved registers
	.long	0                       # Exception handler offset
	.short	0                       # Exception handler section
	.long	1048576                 # Flags (defines frame register)
	.p2align	2
.Ltmp184:
	.short	.Ltmp186-.Ltmp185       # Record length
.Ltmp185:
	.short	4414                    # Record kind: S_LOCAL
	.long	1569                    # TypeIndex
	.short	1                       # Flags
	.asciz	"StrDest"
	.p2align	2
.Ltmp186:
	.cv_def_range	 .Lfunc_begin1 .Ltmp4, reg, 330
	.cv_def_range	 .Ltmp4 .Ltmp7, reg, 337
	.short	.Ltmp188-.Ltmp187       # Record length
.Ltmp187:
	.short	4414                    # Record kind: S_LOCAL
	.long	1648                    # TypeIndex
	.short	1                       # Flags
	.asciz	"StrSrc"
	.p2align	2
.Ltmp188:
	.cv_def_range	 .Lfunc_begin1 .Ltmp4, reg, 331
	.cv_def_range	 .Ltmp4 .Ltmp6, reg, 338
	.cv_def_range	 .Ltmp6 .Ltmp7, reg, 336
	.short	.Ltmp190-.Ltmp189       # Record length
.Ltmp189:
	.short	4414                    # Record kind: S_LOCAL
	.long	35                      # TypeIndex
	.short	1                       # Flags
	.asciz	"Limit"
	.p2align	2
.Ltmp190:
	.cv_def_range	 .Lfunc_begin1 .Ltmp5, reg, 336
	.cv_def_range	 .Ltmp5 .Ltmp7, reg, 331
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp180:
	.p2align	2
	.cv_linetable	1, StringAnsiToUnicode, .Lfunc_end1
	.section	.debug$S,"dr",associative,StringCopyNW
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for StringCopyNW
	.long	.Ltmp192-.Ltmp191       # Subsection size
.Ltmp191:
	.short	.Ltmp194-.Ltmp193       # Record length
.Ltmp193:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end2-StringCopyNW # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	4107                    # Function type index
	.secrel32	StringCopyNW    # Function section relative address
	.secidx	StringCopyNW            # Function section index
	.byte	0                       # Flags
	.asciz	"StringCopyNW"          # Function name
	.p2align	2
.Ltmp194:
	.short	.Ltmp196-.Ltmp195       # Record length
.Ltmp195:
	.short	4114                    # Record kind: S_FRAMEPROC
	.long	0                       # FrameSize
	.long	0                       # Padding
	.long	0                       # Offset of padding
	.long	0                       # Bytes of callee saved registers
	.long	0                       # Exception handler offset
	.short	0                       # Exception handler section
	.long	1048576                 # Flags (defines frame register)
	.p2align	2
.Ltmp196:
	.short	.Ltmp198-.Ltmp197       # Record length
.Ltmp197:
	.short	4414                    # Record kind: S_LOCAL
	.long	1569                    # TypeIndex
	.short	1                       # Flags
	.asciz	"dest"
	.p2align	2
.Ltmp198:
	.cv_def_range	 .Lfunc_begin2 .Ltmp8, reg, 330
	.cv_def_range	 .Ltmp8 .Lfunc_end2, reg, 328
	.short	.Ltmp200-.Ltmp199       # Record length
.Ltmp199:
	.short	4414                    # Record kind: S_LOCAL
	.long	1569                    # TypeIndex
	.short	1                       # Flags
	.asciz	"src"
	.p2align	2
.Ltmp200:
	.cv_def_range	 .Lfunc_begin2 .Lfunc_end2, reg, 331
	.short	.Ltmp202-.Ltmp201       # Record length
.Ltmp201:
	.short	4414                    # Record kind: S_LOCAL
	.long	35                      # TypeIndex
	.short	1                       # Flags
	.asciz	"limit"
	.p2align	2
.Ltmp202:
	.cv_def_range	 .Lfunc_begin2 .Lfunc_end2, reg, 336
	.short	.Ltmp204-.Ltmp203       # Record length
.Ltmp203:
	.short	4355                    # Record kind: S_BLOCK32
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	.Ltmp13-.Ltmp8          # Code size
	.secrel32	.Ltmp8          # Function section relative address
	.secidx	.Lfunc_begin2           # Function section index
	.byte	0                       # Lexical block name
	.p2align	2
.Ltmp204:
	.short	.Ltmp206-.Ltmp205       # Record length
.Ltmp205:
	.short	4414                    # Record kind: S_LOCAL
	.long	35                      # TypeIndex
	.short	256                     # Flags
	.asciz	"i"
	.p2align	2
.Ltmp206:
	.short	2                       # Record length
	.short	6                       # Record kind: S_END
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp192:
	.p2align	2
	.cv_linetable	2, StringCopyNW, .Lfunc_end2
	.section	.debug$S,"dr",associative,StringLengthW
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for StringLengthW
	.long	.Ltmp208-.Ltmp207       # Subsection size
.Ltmp207:
	.short	.Ltmp210-.Ltmp209       # Record length
.Ltmp209:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end3-StringLengthW # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	4109                    # Function type index
	.secrel32	StringLengthW   # Function section relative address
	.secidx	StringLengthW           # Function section index
	.byte	0                       # Flags
	.asciz	"StringLengthW"         # Function name
	.p2align	2
.Ltmp210:
	.short	.Ltmp212-.Ltmp211       # Record length
.Ltmp211:
	.short	4114                    # Record kind: S_FRAMEPROC
	.long	0                       # FrameSize
	.long	0                       # Padding
	.long	0                       # Offset of padding
	.long	0                       # Bytes of callee saved registers
	.long	0                       # Exception handler offset
	.short	0                       # Exception handler section
	.long	1048576                 # Flags (defines frame register)
	.p2align	2
.Ltmp212:
	.short	.Ltmp214-.Ltmp213       # Record length
.Ltmp213:
	.short	4414                    # Record kind: S_LOCAL
	.long	1569                    # TypeIndex
	.short	1                       # Flags
	.asciz	"String"
	.p2align	2
.Ltmp214:
	.cv_def_range	 .Lfunc_begin3 .Lfunc_end3, reg, 330
	.short	.Ltmp216-.Ltmp215       # Record length
.Ltmp215:
	.short	4414                    # Record kind: S_LOCAL
	.long	35                      # TypeIndex
	.short	256                     # Flags
	.asciz	"i"
	.p2align	2
.Ltmp216:
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp208:
	.p2align	2
	.cv_linetable	3, StringLengthW, .Lfunc_end3
	.section	.debug$S,"dr",associative,StringReverseW
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for StringReverseW
	.long	.Ltmp218-.Ltmp217       # Subsection size
.Ltmp217:
	.short	.Ltmp220-.Ltmp219       # Record length
.Ltmp219:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end4-StringReverseW # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	4098                    # Function type index
	.secrel32	StringReverseW  # Function section relative address
	.secidx	StringReverseW          # Function section index
	.byte	0                       # Flags
	.asciz	"StringReverseW"        # Function name
	.p2align	2
.Ltmp220:
	.short	.Ltmp222-.Ltmp221       # Record length
.Ltmp221:
	.short	4114                    # Record kind: S_FRAMEPROC
	.long	0                       # FrameSize
	.long	0                       # Padding
	.long	0                       # Offset of padding
	.long	0                       # Bytes of callee saved registers
	.long	0                       # Exception handler offset
	.short	0                       # Exception handler section
	.long	1048576                 # Flags (defines frame register)
	.p2align	2
.Ltmp222:
	.short	.Ltmp224-.Ltmp223       # Record length
.Ltmp223:
	.short	4414                    # Record kind: S_LOCAL
	.long	1569                    # TypeIndex
	.short	1                       # Flags
	.asciz	"String"
	.p2align	2
.Ltmp224:
	.cv_def_range	 .Lfunc_begin4 .Ltmp18 .Ltmp19 .Ltmp19 .Ltmp20 .Ltmp21, reg, 330
	.cv_def_range	 .Ltmp26 .Ltmp27, reg, 328
	.short	.Ltmp226-.Ltmp225       # Record length
.Ltmp225:
	.short	4414                    # Record kind: S_LOCAL
	.long	1569                    # TypeIndex
	.short	0                       # Flags
	.asciz	"left"
	.p2align	2
.Ltmp226:
	.cv_def_range	 .Lfunc_begin4 .Ltmp21, reg, 330
	.short	.Ltmp228-.Ltmp227       # Record length
.Ltmp227:
	.short	4414                    # Record kind: S_LOCAL
	.long	33                      # TypeIndex
	.short	0                       # Flags
	.asciz	"c"
	.p2align	2
.Ltmp228:
	.cv_def_range	 .Ltmp22 .Ltmp27, reg, 352
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp218:
	.p2align	2
	.cv_linetable	4, StringReverseW, .Lfunc_end4
	.section	.debug$S,"dr",associative,StringCompareW
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for StringCompareW
	.long	.Ltmp230-.Ltmp229       # Subsection size
.Ltmp229:
	.short	.Ltmp232-.Ltmp231       # Record length
.Ltmp231:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end5-StringCompareW # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	4112                    # Function type index
	.secrel32	StringCompareW  # Function section relative address
	.secidx	StringCompareW          # Function section index
	.byte	0                       # Flags
	.asciz	"StringCompareW"        # Function name
	.p2align	2
.Ltmp232:
	.short	.Ltmp234-.Ltmp233       # Record length
.Ltmp233:
	.short	4114                    # Record kind: S_FRAMEPROC
	.long	0                       # FrameSize
	.long	0                       # Padding
	.long	0                       # Offset of padding
	.long	0                       # Bytes of callee saved registers
	.long	0                       # Exception handler offset
	.short	0                       # Exception handler section
	.long	1048576                 # Flags (defines frame register)
	.p2align	2
.Ltmp234:
	.short	.Ltmp236-.Ltmp235       # Record length
.Ltmp235:
	.short	4414                    # Record kind: S_LOCAL
	.long	1569                    # TypeIndex
	.short	1                       # Flags
	.asciz	"String1"
	.p2align	2
.Ltmp236:
	.cv_def_range	 .Lfunc_begin5 .Lfunc_end5, reg, 330
	.short	.Ltmp238-.Ltmp237       # Record length
.Ltmp237:
	.short	4414                    # Record kind: S_LOCAL
	.long	1569                    # TypeIndex
	.short	1                       # Flags
	.asciz	"String2"
	.p2align	2
.Ltmp238:
	.cv_def_range	 .Lfunc_begin5 .Lfunc_end5, reg, 331
	.short	.Ltmp240-.Ltmp239       # Record length
.Ltmp239:
	.short	4414                    # Record kind: S_LOCAL
	.long	35                      # TypeIndex
	.short	256                     # Flags
	.asciz	"i"
	.p2align	2
.Ltmp240:
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp230:
	.p2align	2
	.cv_linetable	5, StringCompareW, .Lfunc_end5
	.section	.debug$S,"dr",associative,IntegerToDecimalW
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for IntegerToDecimalW
	.long	.Ltmp242-.Ltmp241       # Subsection size
.Ltmp241:
	.short	.Ltmp244-.Ltmp243       # Record length
.Ltmp243:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end6-IntegerToDecimalW # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	4115                    # Function type index
	.secrel32	IntegerToDecimalW # Function section relative address
	.secidx	IntegerToDecimalW       # Function section index
	.byte	0                       # Flags
	.asciz	"IntegerToDecimalW"     # Function name
	.p2align	2
.Ltmp244:
	.short	.Ltmp246-.Ltmp245       # Record length
.Ltmp245:
	.short	4114                    # Record kind: S_FRAMEPROC
	.long	0                       # FrameSize
	.long	0                       # Padding
	.long	0                       # Offset of padding
	.long	0                       # Bytes of callee saved registers
	.long	0                       # Exception handler offset
	.short	0                       # Exception handler section
	.long	1048576                 # Flags (defines frame register)
	.p2align	2
.Ltmp246:
	.short	.Ltmp248-.Ltmp247       # Record length
.Ltmp247:
	.short	4414                    # Record kind: S_LOCAL
	.long	116                     # TypeIndex
	.short	1                       # Flags
	.asciz	"Value"
	.p2align	2
.Ltmp248:
	.cv_def_range	 .Lfunc_begin6 .Ltmp38 .Ltmp43 .Ltmp44, reg, 18
	.short	.Ltmp250-.Ltmp249       # Record length
.Ltmp249:
	.short	4414                    # Record kind: S_LOCAL
	.long	1569                    # TypeIndex
	.short	1                       # Flags
	.asciz	"String"
	.p2align	2
.Ltmp250:
	.cv_def_range	 .Lfunc_begin6 .Ltmp49, reg, 331
	.short	.Ltmp252-.Ltmp251       # Record length
.Ltmp251:
	.short	4414                    # Record kind: S_LOCAL
	.long	116                     # TypeIndex
	.short	0                       # Flags
	.asciz	"q"
	.p2align	2
.Ltmp252:
	.cv_def_range	 .Lfunc_begin6 .Ltmp39, reg, 18
	.cv_def_range	 .Ltmp39 .Ltmp43, reg, 363
	.cv_def_range	 .Ltmp43 .Ltmp44, reg, 18
	.short	.Ltmp254-.Ltmp253       # Record length
.Ltmp253:
	.short	4414                    # Record kind: S_LOCAL
	.long	116                     # TypeIndex
	.short	0                       # Flags
	.asciz	"i"
	.p2align	2
.Ltmp254:
	.cv_def_range	 .Ltmp38 .Ltmp43, reg, 337
	.short	.Ltmp256-.Ltmp255       # Record length
.Ltmp255:
	.short	4355                    # Record kind: S_BLOCK32
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	.Ltmp41-.Ltmp40         # Code size
	.secrel32	.Ltmp40         # Function section relative address
	.secidx	.Lfunc_begin6           # Function section index
	.byte	0                       # Lexical block name
	.p2align	2
.Ltmp256:
	.short	.Ltmp258-.Ltmp257       # Record length
.Ltmp257:
	.short	4414                    # Record kind: S_LOCAL
	.long	116                     # TypeIndex
	.short	256                     # Flags
	.asciz	"r"
	.p2align	2
.Ltmp258:
	.short	2                       # Record length
	.short	6                       # Record kind: S_END
	.short	.Ltmp260-.Ltmp259       # Record length
.Ltmp259:
	.short	4429                    # Record kind: S_INLINESITE
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	4098                    # Inlinee type index
	.cv_inline_linetable	7 1 34 .Lfunc_begin6 .Lfunc_end6
	.p2align	2
.Ltmp260:
	.short	.Ltmp262-.Ltmp261       # Record length
.Ltmp261:
	.short	4414                    # Record kind: S_LOCAL
	.long	1569                    # TypeIndex
	.short	1                       # Flags
	.asciz	"String"
	.p2align	2
.Ltmp262:
	.cv_def_range	 .Ltmp45 .Ltmp46 .Ltmp47 .Ltmp47 .Ltmp48 .Ltmp49, reg, 331
	.cv_def_range	 .Ltmp54 .Ltmp55, reg, 328
	.short	.Ltmp264-.Ltmp263       # Record length
.Ltmp263:
	.short	4414                    # Record kind: S_LOCAL
	.long	1569                    # TypeIndex
	.short	0                       # Flags
	.asciz	"left"
	.p2align	2
.Ltmp264:
	.cv_def_range	 .Ltmp45 .Ltmp49, reg, 331
	.short	.Ltmp266-.Ltmp265       # Record length
.Ltmp265:
	.short	4414                    # Record kind: S_LOCAL
	.long	33                      # TypeIndex
	.short	0                       # Flags
	.asciz	"c"
	.p2align	2
.Ltmp266:
	.cv_def_range	 .Ltmp50 .Ltmp55, reg, 352
	.short	2                       # Record length
	.short	4430                    # Record kind: S_INLINESITE_END
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp242:
	.p2align	2
	.cv_linetable	6, IntegerToDecimalW, .Lfunc_end6
	.section	.debug$S,"dr",associative,IntegerToDecimalW64
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for IntegerToDecimalW64
	.long	.Ltmp268-.Ltmp267       # Subsection size
.Ltmp267:
	.short	.Ltmp270-.Ltmp269       # Record length
.Ltmp269:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end7-IntegerToDecimalW64 # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	4118                    # Function type index
	.secrel32	IntegerToDecimalW64 # Function section relative address
	.secidx	IntegerToDecimalW64     # Function section index
	.byte	0                       # Flags
	.asciz	"IntegerToDecimalW64"   # Function name
	.p2align	2
.Ltmp270:
	.short	.Ltmp272-.Ltmp271       # Record length
.Ltmp271:
	.short	4114                    # Record kind: S_FRAMEPROC
	.long	0                       # FrameSize
	.long	0                       # Padding
	.long	0                       # Offset of padding
	.long	0                       # Bytes of callee saved registers
	.long	0                       # Exception handler offset
	.short	0                       # Exception handler section
	.long	1048576                 # Flags (defines frame register)
	.p2align	2
.Ltmp272:
	.short	.Ltmp274-.Ltmp273       # Record length
.Ltmp273:
	.short	4414                    # Record kind: S_LOCAL
	.long	19                      # TypeIndex
	.short	1                       # Flags
	.asciz	"Value"
	.p2align	2
.Ltmp274:
	.cv_def_range	 .Lfunc_begin7 .Lfunc_begin7, reg, 330
	.cv_def_range	 .Lfunc_begin7 .Ltmp58 .Ltmp63 .Ltmp64, reg, 18
	.short	.Ltmp276-.Ltmp275       # Record length
.Ltmp275:
	.short	4414                    # Record kind: S_LOCAL
	.long	1569                    # TypeIndex
	.short	1                       # Flags
	.asciz	"String"
	.p2align	2
.Ltmp276:
	.cv_def_range	 .Lfunc_begin7 .Ltmp69, reg, 331
	.short	.Ltmp278-.Ltmp277       # Record length
.Ltmp277:
	.short	4414                    # Record kind: S_LOCAL
	.long	116                     # TypeIndex
	.short	0                       # Flags
	.asciz	"q"
	.p2align	2
.Ltmp278:
	.cv_def_range	 .Lfunc_begin7 .Ltmp59, reg, 18
	.cv_def_range	 .Ltmp59 .Ltmp63, reg, 363
	.cv_def_range	 .Ltmp63 .Ltmp64, reg, 18
	.short	.Ltmp280-.Ltmp279       # Record length
.Ltmp279:
	.short	4414                    # Record kind: S_LOCAL
	.long	116                     # TypeIndex
	.short	0                       # Flags
	.asciz	"i"
	.p2align	2
.Ltmp280:
	.cv_def_range	 .Ltmp58 .Ltmp63, reg, 337
	.short	.Ltmp282-.Ltmp281       # Record length
.Ltmp281:
	.short	4355                    # Record kind: S_BLOCK32
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	.Ltmp61-.Ltmp60         # Code size
	.secrel32	.Ltmp60         # Function section relative address
	.secidx	.Lfunc_begin7           # Function section index
	.byte	0                       # Lexical block name
	.p2align	2
.Ltmp282:
	.short	.Ltmp284-.Ltmp283       # Record length
.Ltmp283:
	.short	4414                    # Record kind: S_LOCAL
	.long	116                     # TypeIndex
	.short	256                     # Flags
	.asciz	"r"
	.p2align	2
.Ltmp284:
	.short	2                       # Record length
	.short	6                       # Record kind: S_END
	.short	.Ltmp286-.Ltmp285       # Record length
.Ltmp285:
	.short	4429                    # Record kind: S_INLINESITE
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	4098                    # Inlinee type index
	.cv_inline_linetable	9 1 34 .Lfunc_begin7 .Lfunc_end7
	.p2align	2
.Ltmp286:
	.short	.Ltmp288-.Ltmp287       # Record length
.Ltmp287:
	.short	4414                    # Record kind: S_LOCAL
	.long	1569                    # TypeIndex
	.short	1                       # Flags
	.asciz	"String"
	.p2align	2
.Ltmp288:
	.cv_def_range	 .Ltmp65 .Ltmp66 .Ltmp67 .Ltmp67 .Ltmp68 .Ltmp69, reg, 331
	.cv_def_range	 .Ltmp74 .Ltmp75, reg, 328
	.short	.Ltmp290-.Ltmp289       # Record length
.Ltmp289:
	.short	4414                    # Record kind: S_LOCAL
	.long	1569                    # TypeIndex
	.short	0                       # Flags
	.asciz	"left"
	.p2align	2
.Ltmp290:
	.cv_def_range	 .Ltmp65 .Ltmp69, reg, 331
	.short	.Ltmp292-.Ltmp291       # Record length
.Ltmp291:
	.short	4414                    # Record kind: S_LOCAL
	.long	33                      # TypeIndex
	.short	0                       # Flags
	.asciz	"c"
	.p2align	2
.Ltmp292:
	.cv_def_range	 .Ltmp70 .Ltmp75, reg, 352
	.short	2                       # Record length
	.short	4430                    # Record kind: S_INLINESITE_END
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp268:
	.p2align	2
	.cv_linetable	8, IntegerToDecimalW64, .Lfunc_end7
	.section	.debug$S,"dr",associative,IntegerToHexW
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for IntegerToHexW
	.long	.Ltmp294-.Ltmp293       # Subsection size
.Ltmp293:
	.short	.Ltmp296-.Ltmp295       # Record length
.Ltmp295:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end8-IntegerToHexW # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	4119                    # Function type index
	.secrel32	IntegerToHexW   # Function section relative address
	.secidx	IntegerToHexW           # Function section index
	.byte	0                       # Flags
	.asciz	"IntegerToHexW"         # Function name
	.p2align	2
.Ltmp296:
	.short	.Ltmp298-.Ltmp297       # Record length
.Ltmp297:
	.short	4114                    # Record kind: S_FRAMEPROC
	.long	0                       # FrameSize
	.long	0                       # Padding
	.long	0                       # Offset of padding
	.long	0                       # Bytes of callee saved registers
	.long	0                       # Exception handler offset
	.short	0                       # Exception handler section
	.long	1048576                 # Flags (defines frame register)
	.p2align	2
.Ltmp298:
	.short	.Ltmp300-.Ltmp299       # Record length
.Ltmp299:
	.short	4414                    # Record kind: S_LOCAL
	.long	116                     # TypeIndex
	.short	1                       # Flags
	.asciz	"Value"
	.p2align	2
.Ltmp300:
	.cv_def_range	 .Lfunc_begin8 .Ltmp78 .Ltmp84 .Ltmp85, reg, 18
	.short	.Ltmp302-.Ltmp301       # Record length
.Ltmp301:
	.short	4414                    # Record kind: S_LOCAL
	.long	1569                    # TypeIndex
	.short	1                       # Flags
	.asciz	"String"
	.p2align	2
.Ltmp302:
	.cv_def_range	 .Lfunc_begin8 .Ltmp90, reg, 331
	.short	.Ltmp304-.Ltmp303       # Record length
.Ltmp303:
	.short	4414                    # Record kind: S_LOCAL
	.long	116                     # TypeIndex
	.short	0                       # Flags
	.asciz	"q"
	.p2align	2
.Ltmp304:
	.cv_def_range	 .Lfunc_begin8 .Ltmp90, reg, 18
	.short	.Ltmp306-.Ltmp305       # Record length
.Ltmp305:
	.short	4414                    # Record kind: S_LOCAL
	.long	116                     # TypeIndex
	.short	0                       # Flags
	.asciz	"i"
	.p2align	2
.Ltmp306:
	.cv_def_range	 .Ltmp78 .Ltmp84, reg, 337
	.short	.Ltmp308-.Ltmp307       # Record length
.Ltmp307:
	.short	4355                    # Record kind: S_BLOCK32
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	.Ltmp81-.Ltmp78         # Code size
	.secrel32	.Ltmp78         # Function section relative address
	.secidx	.Lfunc_begin8           # Function section index
	.byte	0                       # Lexical block name
	.p2align	2
.Ltmp308:
	.short	.Ltmp310-.Ltmp309       # Record length
.Ltmp309:
	.short	4414                    # Record kind: S_LOCAL
	.long	116                     # TypeIndex
	.short	0                       # Flags
	.asciz	"r"
	.p2align	2
.Ltmp310:
	.cv_def_range	 .Ltmp79 .Ltmp80, reg, 17
	.short	2                       # Record length
	.short	6                       # Record kind: S_END
	.short	.Ltmp312-.Ltmp311       # Record length
.Ltmp311:
	.short	4429                    # Record kind: S_INLINESITE
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	4098                    # Inlinee type index
	.cv_inline_linetable	11 1 34 .Lfunc_begin8 .Lfunc_end8
	.p2align	2
.Ltmp312:
	.short	.Ltmp314-.Ltmp313       # Record length
.Ltmp313:
	.short	4414                    # Record kind: S_LOCAL
	.long	1569                    # TypeIndex
	.short	1                       # Flags
	.asciz	"String"
	.p2align	2
.Ltmp314:
	.cv_def_range	 .Ltmp86 .Ltmp87 .Ltmp88 .Ltmp88 .Ltmp89 .Ltmp90, reg, 331
	.cv_def_range	 .Ltmp95 .Ltmp96, reg, 328
	.short	.Ltmp316-.Ltmp315       # Record length
.Ltmp315:
	.short	4414                    # Record kind: S_LOCAL
	.long	1569                    # TypeIndex
	.short	0                       # Flags
	.asciz	"left"
	.p2align	2
.Ltmp316:
	.cv_def_range	 .Ltmp86 .Ltmp90, reg, 331
	.short	.Ltmp318-.Ltmp317       # Record length
.Ltmp317:
	.short	4414                    # Record kind: S_LOCAL
	.long	33                      # TypeIndex
	.short	0                       # Flags
	.asciz	"c"
	.p2align	2
.Ltmp318:
	.cv_def_range	 .Ltmp91 .Ltmp96, reg, 352
	.short	2                       # Record length
	.short	4430                    # Record kind: S_INLINESITE_END
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp294:
	.p2align	2
	.cv_linetable	10, IntegerToHexW, .Lfunc_end8
	.section	.debug$S,"dr",associative,IntegerToHexW64
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for IntegerToHexW64
	.long	.Ltmp320-.Ltmp319       # Subsection size
.Ltmp319:
	.short	.Ltmp322-.Ltmp321       # Record length
.Ltmp321:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end9-IntegerToHexW64 # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	4120                    # Function type index
	.secrel32	IntegerToHexW64 # Function section relative address
	.secidx	IntegerToHexW64         # Function section index
	.byte	0                       # Flags
	.asciz	"IntegerToHexW64"       # Function name
	.p2align	2
.Ltmp322:
	.short	.Ltmp324-.Ltmp323       # Record length
.Ltmp323:
	.short	4114                    # Record kind: S_FRAMEPROC
	.long	0                       # FrameSize
	.long	0                       # Padding
	.long	0                       # Offset of padding
	.long	0                       # Bytes of callee saved registers
	.long	0                       # Exception handler offset
	.short	0                       # Exception handler section
	.long	1048576                 # Flags (defines frame register)
	.p2align	2
.Ltmp324:
	.short	.Ltmp326-.Ltmp325       # Record length
.Ltmp325:
	.short	4414                    # Record kind: S_LOCAL
	.long	19                      # TypeIndex
	.short	1                       # Flags
	.asciz	"Value"
	.p2align	2
.Ltmp326:
	.cv_def_range	 .Lfunc_begin9 .Lfunc_begin9, reg, 330
	.cv_def_range	 .Lfunc_begin9 .Ltmp99 .Ltmp105 .Ltmp106, reg, 18
	.short	.Ltmp328-.Ltmp327       # Record length
.Ltmp327:
	.short	4414                    # Record kind: S_LOCAL
	.long	1569                    # TypeIndex
	.short	1                       # Flags
	.asciz	"String"
	.p2align	2
.Ltmp328:
	.cv_def_range	 .Lfunc_begin9 .Ltmp111, reg, 331
	.short	.Ltmp330-.Ltmp329       # Record length
.Ltmp329:
	.short	4414                    # Record kind: S_LOCAL
	.long	116                     # TypeIndex
	.short	0                       # Flags
	.asciz	"q"
	.p2align	2
.Ltmp330:
	.cv_def_range	 .Lfunc_begin9 .Ltmp111, reg, 18
	.short	.Ltmp332-.Ltmp331       # Record length
.Ltmp331:
	.short	4414                    # Record kind: S_LOCAL
	.long	116                     # TypeIndex
	.short	0                       # Flags
	.asciz	"i"
	.p2align	2
.Ltmp332:
	.cv_def_range	 .Ltmp99 .Ltmp105, reg, 337
	.short	.Ltmp334-.Ltmp333       # Record length
.Ltmp333:
	.short	4355                    # Record kind: S_BLOCK32
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	.Ltmp102-.Ltmp99        # Code size
	.secrel32	.Ltmp99         # Function section relative address
	.secidx	.Lfunc_begin9           # Function section index
	.byte	0                       # Lexical block name
	.p2align	2
.Ltmp334:
	.short	.Ltmp336-.Ltmp335       # Record length
.Ltmp335:
	.short	4414                    # Record kind: S_LOCAL
	.long	116                     # TypeIndex
	.short	0                       # Flags
	.asciz	"r"
	.p2align	2
.Ltmp336:
	.cv_def_range	 .Ltmp100 .Ltmp101, reg, 17
	.short	2                       # Record length
	.short	6                       # Record kind: S_END
	.short	.Ltmp338-.Ltmp337       # Record length
.Ltmp337:
	.short	4429                    # Record kind: S_INLINESITE
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	4098                    # Inlinee type index
	.cv_inline_linetable	13 1 34 .Lfunc_begin9 .Lfunc_end9
	.p2align	2
.Ltmp338:
	.short	.Ltmp340-.Ltmp339       # Record length
.Ltmp339:
	.short	4414                    # Record kind: S_LOCAL
	.long	1569                    # TypeIndex
	.short	1                       # Flags
	.asciz	"String"
	.p2align	2
.Ltmp340:
	.cv_def_range	 .Ltmp107 .Ltmp108 .Ltmp109 .Ltmp109 .Ltmp110 .Ltmp111, reg, 331
	.cv_def_range	 .Ltmp116 .Ltmp117, reg, 328
	.short	.Ltmp342-.Ltmp341       # Record length
.Ltmp341:
	.short	4414                    # Record kind: S_LOCAL
	.long	1569                    # TypeIndex
	.short	0                       # Flags
	.asciz	"left"
	.p2align	2
.Ltmp342:
	.cv_def_range	 .Ltmp107 .Ltmp111, reg, 331
	.short	.Ltmp344-.Ltmp343       # Record length
.Ltmp343:
	.short	4414                    # Record kind: S_LOCAL
	.long	33                      # TypeIndex
	.short	0                       # Flags
	.asciz	"c"
	.p2align	2
.Ltmp344:
	.cv_def_range	 .Ltmp112 .Ltmp117, reg, 352
	.short	2                       # Record length
	.short	4430                    # Record kind: S_INLINESITE_END
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp320:
	.p2align	2
	.cv_linetable	12, IntegerToHexW64, .Lfunc_end9
	.section	.debug$S,"dr",associative,IntegerToHEXW
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for IntegerToHEXW
	.long	.Ltmp346-.Ltmp345       # Subsection size
.Ltmp345:
	.short	.Ltmp348-.Ltmp347       # Record length
.Ltmp347:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end10-IntegerToHEXW # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	4121                    # Function type index
	.secrel32	IntegerToHEXW   # Function section relative address
	.secidx	IntegerToHEXW           # Function section index
	.byte	0                       # Flags
	.asciz	"IntegerToHEXW"         # Function name
	.p2align	2
.Ltmp348:
	.short	.Ltmp350-.Ltmp349       # Record length
.Ltmp349:
	.short	4114                    # Record kind: S_FRAMEPROC
	.long	0                       # FrameSize
	.long	0                       # Padding
	.long	0                       # Offset of padding
	.long	0                       # Bytes of callee saved registers
	.long	0                       # Exception handler offset
	.short	0                       # Exception handler section
	.long	1048576                 # Flags (defines frame register)
	.p2align	2
.Ltmp350:
	.short	.Ltmp352-.Ltmp351       # Record length
.Ltmp351:
	.short	4414                    # Record kind: S_LOCAL
	.long	116                     # TypeIndex
	.short	1                       # Flags
	.asciz	"Value"
	.p2align	2
.Ltmp352:
	.cv_def_range	 .Lfunc_begin10 .Ltmp120 .Ltmp126 .Ltmp127, reg, 18
	.short	.Ltmp354-.Ltmp353       # Record length
.Ltmp353:
	.short	4414                    # Record kind: S_LOCAL
	.long	1569                    # TypeIndex
	.short	1                       # Flags
	.asciz	"String"
	.p2align	2
.Ltmp354:
	.cv_def_range	 .Lfunc_begin10 .Ltmp132, reg, 331
	.short	.Ltmp356-.Ltmp355       # Record length
.Ltmp355:
	.short	4414                    # Record kind: S_LOCAL
	.long	116                     # TypeIndex
	.short	0                       # Flags
	.asciz	"q"
	.p2align	2
.Ltmp356:
	.cv_def_range	 .Lfunc_begin10 .Ltmp132, reg, 18
	.short	.Ltmp358-.Ltmp357       # Record length
.Ltmp357:
	.short	4414                    # Record kind: S_LOCAL
	.long	116                     # TypeIndex
	.short	0                       # Flags
	.asciz	"i"
	.p2align	2
.Ltmp358:
	.cv_def_range	 .Ltmp120 .Ltmp126, reg, 337
	.short	.Ltmp360-.Ltmp359       # Record length
.Ltmp359:
	.short	4355                    # Record kind: S_BLOCK32
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	.Ltmp123-.Ltmp120       # Code size
	.secrel32	.Ltmp120        # Function section relative address
	.secidx	.Lfunc_begin10          # Function section index
	.byte	0                       # Lexical block name
	.p2align	2
.Ltmp360:
	.short	.Ltmp362-.Ltmp361       # Record length
.Ltmp361:
	.short	4414                    # Record kind: S_LOCAL
	.long	116                     # TypeIndex
	.short	0                       # Flags
	.asciz	"r"
	.p2align	2
.Ltmp362:
	.cv_def_range	 .Ltmp121 .Ltmp122, reg, 17
	.short	2                       # Record length
	.short	6                       # Record kind: S_END
	.short	.Ltmp364-.Ltmp363       # Record length
.Ltmp363:
	.short	4429                    # Record kind: S_INLINESITE
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	4098                    # Inlinee type index
	.cv_inline_linetable	15 1 34 .Lfunc_begin10 .Lfunc_end10
	.p2align	2
.Ltmp364:
	.short	.Ltmp366-.Ltmp365       # Record length
.Ltmp365:
	.short	4414                    # Record kind: S_LOCAL
	.long	1569                    # TypeIndex
	.short	1                       # Flags
	.asciz	"String"
	.p2align	2
.Ltmp366:
	.cv_def_range	 .Ltmp128 .Ltmp129 .Ltmp130 .Ltmp130 .Ltmp131 .Ltmp132, reg, 331
	.cv_def_range	 .Ltmp137 .Ltmp138, reg, 328
	.short	.Ltmp368-.Ltmp367       # Record length
.Ltmp367:
	.short	4414                    # Record kind: S_LOCAL
	.long	1569                    # TypeIndex
	.short	0                       # Flags
	.asciz	"left"
	.p2align	2
.Ltmp368:
	.cv_def_range	 .Ltmp128 .Ltmp132, reg, 331
	.short	.Ltmp370-.Ltmp369       # Record length
.Ltmp369:
	.short	4414                    # Record kind: S_LOCAL
	.long	33                      # TypeIndex
	.short	0                       # Flags
	.asciz	"c"
	.p2align	2
.Ltmp370:
	.cv_def_range	 .Ltmp133 .Ltmp138, reg, 352
	.short	2                       # Record length
	.short	4430                    # Record kind: S_INLINESITE_END
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp346:
	.p2align	2
	.cv_linetable	14, IntegerToHEXW, .Lfunc_end10
	.section	.debug$S,"dr",associative,IntegerToHEXW64
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for IntegerToHEXW64
	.long	.Ltmp372-.Ltmp371       # Subsection size
.Ltmp371:
	.short	.Ltmp374-.Ltmp373       # Record length
.Ltmp373:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end11-IntegerToHEXW64 # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	4122                    # Function type index
	.secrel32	IntegerToHEXW64 # Function section relative address
	.secidx	IntegerToHEXW64         # Function section index
	.byte	0                       # Flags
	.asciz	"IntegerToHEXW64"       # Function name
	.p2align	2
.Ltmp374:
	.short	.Ltmp376-.Ltmp375       # Record length
.Ltmp375:
	.short	4114                    # Record kind: S_FRAMEPROC
	.long	0                       # FrameSize
	.long	0                       # Padding
	.long	0                       # Offset of padding
	.long	0                       # Bytes of callee saved registers
	.long	0                       # Exception handler offset
	.short	0                       # Exception handler section
	.long	1048576                 # Flags (defines frame register)
	.p2align	2
.Ltmp376:
	.short	.Ltmp378-.Ltmp377       # Record length
.Ltmp377:
	.short	4414                    # Record kind: S_LOCAL
	.long	19                      # TypeIndex
	.short	1                       # Flags
	.asciz	"Value"
	.p2align	2
.Ltmp378:
	.cv_def_range	 .Lfunc_begin11 .Ltmp141 .Ltmp147 .Ltmp148, reg, 330
	.short	.Ltmp380-.Ltmp379       # Record length
.Ltmp379:
	.short	4414                    # Record kind: S_LOCAL
	.long	1569                    # TypeIndex
	.short	1                       # Flags
	.asciz	"String"
	.p2align	2
.Ltmp380:
	.cv_def_range	 .Lfunc_begin11 .Ltmp153, reg, 331
	.short	.Ltmp382-.Ltmp381       # Record length
.Ltmp381:
	.short	4414                    # Record kind: S_LOCAL
	.long	19                      # TypeIndex
	.short	0                       # Flags
	.asciz	"q"
	.p2align	2
.Ltmp382:
	.cv_def_range	 .Lfunc_begin11 .Ltmp153, reg, 330
	.short	.Ltmp384-.Ltmp383       # Record length
.Ltmp383:
	.short	4414                    # Record kind: S_LOCAL
	.long	116                     # TypeIndex
	.short	0                       # Flags
	.asciz	"i"
	.p2align	2
.Ltmp384:
	.cv_def_range	 .Ltmp141 .Ltmp147, reg, 337
	.short	.Ltmp386-.Ltmp385       # Record length
.Ltmp385:
	.short	4355                    # Record kind: S_BLOCK32
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	.Ltmp144-.Ltmp141       # Code size
	.secrel32	.Ltmp141        # Function section relative address
	.secidx	.Lfunc_begin11          # Function section index
	.byte	0                       # Lexical block name
	.p2align	2
.Ltmp386:
	.short	.Ltmp388-.Ltmp387       # Record length
.Ltmp387:
	.short	4414                    # Record kind: S_LOCAL
	.long	116                     # TypeIndex
	.short	0                       # Flags
	.asciz	"r"
	.p2align	2
.Ltmp388:
	.cv_def_range	 .Ltmp142 .Ltmp143, reg, 328
	.short	2                       # Record length
	.short	6                       # Record kind: S_END
	.short	.Ltmp390-.Ltmp389       # Record length
.Ltmp389:
	.short	4429                    # Record kind: S_INLINESITE
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	4098                    # Inlinee type index
	.cv_inline_linetable	17 1 34 .Lfunc_begin11 .Lfunc_end11
	.p2align	2
.Ltmp390:
	.short	.Ltmp392-.Ltmp391       # Record length
.Ltmp391:
	.short	4414                    # Record kind: S_LOCAL
	.long	1569                    # TypeIndex
	.short	1                       # Flags
	.asciz	"String"
	.p2align	2
.Ltmp392:
	.cv_def_range	 .Ltmp149 .Ltmp150 .Ltmp151 .Ltmp151 .Ltmp152 .Ltmp153, reg, 331
	.cv_def_range	 .Ltmp158 .Ltmp159, reg, 328
	.short	.Ltmp394-.Ltmp393       # Record length
.Ltmp393:
	.short	4414                    # Record kind: S_LOCAL
	.long	1569                    # TypeIndex
	.short	0                       # Flags
	.asciz	"left"
	.p2align	2
.Ltmp394:
	.cv_def_range	 .Ltmp149 .Ltmp153, reg, 331
	.short	.Ltmp396-.Ltmp395       # Record length
.Ltmp395:
	.short	4414                    # Record kind: S_LOCAL
	.long	33                      # TypeIndex
	.short	0                       # Flags
	.asciz	"c"
	.p2align	2
.Ltmp396:
	.cv_def_range	 .Ltmp154 .Ltmp159, reg, 352
	.short	2                       # Record length
	.short	4430                    # Record kind: S_INLINESITE_END
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp372:
	.p2align	2
	.cv_linetable	16, IntegerToHEXW64, .Lfunc_end11
	.section	.debug$S,"dr"
	.long	241
	.long	.Ltmp398-.Ltmp397       # Subsection size
.Ltmp397:
	.short	.Ltmp400-.Ltmp399       # Record length
.Ltmp399:
	.short	4360                    # Record kind: S_UDT
	.long	33                      # Type
	.asciz	"CHAR16"
	.p2align	2
.Ltmp400:
	.short	.Ltmp402-.Ltmp401       # Record length
.Ltmp401:
	.short	4360                    # Record kind: S_UDT
	.long	32                      # Type
	.asciz	"UINT8"
	.p2align	2
.Ltmp402:
	.short	.Ltmp404-.Ltmp403       # Record length
.Ltmp403:
	.short	4360                    # Record kind: S_UDT
	.long	35                      # Type
	.asciz	"UINT64"
	.p2align	2
.Ltmp404:
	.short	.Ltmp406-.Ltmp405       # Record length
.Ltmp405:
	.short	4360                    # Record kind: S_UDT
	.long	35                      # Type
	.asciz	"UINTN"
	.p2align	2
.Ltmp406:
	.short	.Ltmp408-.Ltmp407       # Record length
.Ltmp407:
	.short	4360                    # Record kind: S_UDT
	.long	112                     # Type
	.asciz	"CHAR8"
	.p2align	2
.Ltmp408:
	.short	.Ltmp410-.Ltmp409       # Record length
.Ltmp409:
	.short	4360                    # Record kind: S_UDT
	.long	116                     # Type
	.asciz	"INT32"
	.p2align	2
.Ltmp410:
	.short	.Ltmp412-.Ltmp411       # Record length
.Ltmp411:
	.short	4360                    # Record kind: S_UDT
	.long	19                      # Type
	.asciz	"INT64"
	.p2align	2
.Ltmp412:
.Ltmp398:
	.p2align	2
	.cv_filechecksums               # File index to string table offset subsection
	.cv_stringtable                 # String table
	.long	241
	.long	.Ltmp414-.Ltmp413       # Subsection size
.Ltmp413:
	.short	.Ltmp416-.Ltmp415       # Record length
.Ltmp415:
	.short	4428                    # Record kind: S_BUILDINFO
	.long	4125                    # LF_BUILDINFO index
	.p2align	2
.Ltmp416:
.Ltmp414:
	.p2align	2
	.section	.debug$T,"dr"
	.p2align	2
	.long	4                       # Debug section magic
	# ArgList (0x1000)
	.short	0xa                     # Record length
	.short	0x1201                  # Record kind: LF_ARGLIST
	.long	0x1                     # NumArgs
	.long	0x621                   # Argument: unsigned short*
	# Procedure (0x1001)
	.short	0xe                     # Record length
	.short	0x1008                  # Record kind: LF_PROCEDURE
	.long	0x3                     # ReturnType: void
	.byte	0x0                     # CallingConvention: NearC
	.byte	0x0                     # FunctionOptions
	.short	0x1                     # NumParameters
	.long	0x1000                  # ArgListType: (unsigned short*)
	# FuncId (0x1002)
	.short	0x1a                    # Record length
	.short	0x1601                  # Record kind: LF_FUNC_ID
	.long	0x0                     # ParentScope
	.long	0x1001                  # FunctionType: void (unsigned short*)
	.asciz	"StringReverseW"        # Name
	.byte	241
	# ArgList (0x1003)
	.short	0x12                    # Record length
	.short	0x1201                  # Record kind: LF_ARGLIST
	.long	0x3                     # NumArgs
	.long	0x603                   # Argument: void*
	.long	0x20                    # Argument: unsigned char
	.long	0x23                    # Argument: unsigned __int64
	# Procedure (0x1004)
	.short	0xe                     # Record length
	.short	0x1008                  # Record kind: LF_PROCEDURE
	.long	0x3                     # ReturnType: void
	.byte	0x0                     # CallingConvention: NearC
	.byte	0x0                     # FunctionOptions
	.short	0x3                     # NumParameters
	.long	0x1003                  # ArgListType: (void*, unsigned char, unsigned __int64)
	# FuncId (0x1005)
	.short	0x16                    # Record length
	.short	0x1601                  # Record kind: LF_FUNC_ID
	.long	0x0                     # ParentScope
	.long	0x1004                  # FunctionType: void (void*, unsigned char, unsigned __int64)
	.asciz	"FillMemory"            # Name
	.byte	241
	# ArgList (0x1006)
	.short	0x12                    # Record length
	.short	0x1201                  # Record kind: LF_ARGLIST
	.long	0x3                     # NumArgs
	.long	0x621                   # Argument: unsigned short*
	.long	0x670                   # Argument: char*
	.long	0x23                    # Argument: unsigned __int64
	# Procedure (0x1007)
	.short	0xe                     # Record length
	.short	0x1008                  # Record kind: LF_PROCEDURE
	.long	0x3                     # ReturnType: void
	.byte	0x0                     # CallingConvention: NearC
	.byte	0x0                     # FunctionOptions
	.short	0x3                     # NumParameters
	.long	0x1006                  # ArgListType: (unsigned short*, char*, unsigned __int64)
	# FuncId (0x1008)
	.short	0x1e                    # Record length
	.short	0x1601                  # Record kind: LF_FUNC_ID
	.long	0x0                     # ParentScope
	.long	0x1007                  # FunctionType: void (unsigned short*, char*, unsigned __int64)
	.asciz	"StringAnsiToUnicode"   # Name
	# ArgList (0x1009)
	.short	0x12                    # Record length
	.short	0x1201                  # Record kind: LF_ARGLIST
	.long	0x3                     # NumArgs
	.long	0x621                   # Argument: unsigned short*
	.long	0x621                   # Argument: unsigned short*
	.long	0x23                    # Argument: unsigned __int64
	# Procedure (0x100A)
	.short	0xe                     # Record length
	.short	0x1008                  # Record kind: LF_PROCEDURE
	.long	0x621                   # ReturnType: unsigned short*
	.byte	0x0                     # CallingConvention: NearC
	.byte	0x0                     # FunctionOptions
	.short	0x3                     # NumParameters
	.long	0x1009                  # ArgListType: (unsigned short*, unsigned short*, unsigned __int64)
	# FuncId (0x100B)
	.short	0x1a                    # Record length
	.short	0x1601                  # Record kind: LF_FUNC_ID
	.long	0x0                     # ParentScope
	.long	0x100a                  # FunctionType: unsigned short* (unsigned short*, unsigned short*, unsigned __int64)
	.asciz	"StringCopyNW"          # Name
	.byte	243
	.byte	242
	.byte	241
	# Procedure (0x100C)
	.short	0xe                     # Record length
	.short	0x1008                  # Record kind: LF_PROCEDURE
	.long	0x23                    # ReturnType: unsigned __int64
	.byte	0x0                     # CallingConvention: NearC
	.byte	0x0                     # FunctionOptions
	.short	0x1                     # NumParameters
	.long	0x1000                  # ArgListType: (unsigned short*)
	# FuncId (0x100D)
	.short	0x1a                    # Record length
	.short	0x1601                  # Record kind: LF_FUNC_ID
	.long	0x0                     # ParentScope
	.long	0x100c                  # FunctionType: unsigned __int64 (unsigned short*)
	.asciz	"StringLengthW"         # Name
	.byte	242
	.byte	241
	# ArgList (0x100E)
	.short	0xe                     # Record length
	.short	0x1201                  # Record kind: LF_ARGLIST
	.long	0x2                     # NumArgs
	.long	0x621                   # Argument: unsigned short*
	.long	0x621                   # Argument: unsigned short*
	# Procedure (0x100F)
	.short	0xe                     # Record length
	.short	0x1008                  # Record kind: LF_PROCEDURE
	.long	0x74                    # ReturnType: int
	.byte	0x0                     # CallingConvention: NearC
	.byte	0x0                     # FunctionOptions
	.short	0x2                     # NumParameters
	.long	0x100e                  # ArgListType: (unsigned short*, unsigned short*)
	# FuncId (0x1010)
	.short	0x1a                    # Record length
	.short	0x1601                  # Record kind: LF_FUNC_ID
	.long	0x0                     # ParentScope
	.long	0x100f                  # FunctionType: int (unsigned short*, unsigned short*)
	.asciz	"StringCompareW"        # Name
	.byte	241
	# ArgList (0x1011)
	.short	0xe                     # Record length
	.short	0x1201                  # Record kind: LF_ARGLIST
	.long	0x2                     # NumArgs
	.long	0x74                    # Argument: int
	.long	0x621                   # Argument: unsigned short*
	# Procedure (0x1012)
	.short	0xe                     # Record length
	.short	0x1008                  # Record kind: LF_PROCEDURE
	.long	0x3                     # ReturnType: void
	.byte	0x0                     # CallingConvention: NearC
	.byte	0x0                     # FunctionOptions
	.short	0x2                     # NumParameters
	.long	0x1011                  # ArgListType: (int, unsigned short*)
	# FuncId (0x1013)
	.short	0x1e                    # Record length
	.short	0x1601                  # Record kind: LF_FUNC_ID
	.long	0x0                     # ParentScope
	.long	0x1012                  # FunctionType: void (int, unsigned short*)
	.asciz	"IntegerToDecimalW"     # Name
	.byte	242
	.byte	241
	# ArgList (0x1014)
	.short	0xe                     # Record length
	.short	0x1201                  # Record kind: LF_ARGLIST
	.long	0x2                     # NumArgs
	.long	0x13                    # Argument: __int64
	.long	0x621                   # Argument: unsigned short*
	# Procedure (0x1015)
	.short	0xe                     # Record length
	.short	0x1008                  # Record kind: LF_PROCEDURE
	.long	0x3                     # ReturnType: void
	.byte	0x0                     # CallingConvention: NearC
	.byte	0x0                     # FunctionOptions
	.short	0x2                     # NumParameters
	.long	0x1014                  # ArgListType: (__int64, unsigned short*)
	# FuncId (0x1016)
	.short	0x1e                    # Record length
	.short	0x1601                  # Record kind: LF_FUNC_ID
	.long	0x0                     # ParentScope
	.long	0x1015                  # FunctionType: void (__int64, unsigned short*)
	.asciz	"IntegerToDecimalW64"   # Name
	# FuncId (0x1017)
	.short	0x1a                    # Record length
	.short	0x1601                  # Record kind: LF_FUNC_ID
	.long	0x0                     # ParentScope
	.long	0x1012                  # FunctionType: void (int, unsigned short*)
	.asciz	"IntegerToHexW"         # Name
	.byte	242
	.byte	241
	# FuncId (0x1018)
	.short	0x1a                    # Record length
	.short	0x1601                  # Record kind: LF_FUNC_ID
	.long	0x0                     # ParentScope
	.long	0x1015                  # FunctionType: void (__int64, unsigned short*)
	.asciz	"IntegerToHexW64"       # Name
	# FuncId (0x1019)
	.short	0x1a                    # Record length
	.short	0x1601                  # Record kind: LF_FUNC_ID
	.long	0x0                     # ParentScope
	.long	0x1012                  # FunctionType: void (int, unsigned short*)
	.asciz	"IntegerToHEXW"         # Name
	.byte	242
	.byte	241
	# FuncId (0x101A)
	.short	0x1a                    # Record length
	.short	0x1601                  # Record kind: LF_FUNC_ID
	.long	0x0                     # ParentScope
	.long	0x1015                  # FunctionType: void (__int64, unsigned short*)
	.asciz	"IntegerToHEXW64"       # Name
	# StringId (0x101B)
	.short	0x22                    # Record length
	.short	0x1605                  # Record kind: LF_STRING_ID
	.long	0x0                     # Id
	.asciz	"D:\\Projects\\HelloUefiBmpRes" # StringData
	# StringId (0x101C)
	.short	0x12                    # Record length
	.short	0x1605                  # Record kind: LF_STRING_ID
	.long	0x0                     # Id
	.asciz	"string.c"              # StringData
	.byte	243
	.byte	242
	.byte	241
	# BuildInfo (0x101D)
	.short	0x1a                    # Record length
	.short	0x1603                  # Record kind: LF_BUILDINFO
	.short	0x5                     # NumArgs
	.long	0x101b                  # Argument: D:\Projects\HelloUefiBmpRes
	.long	0x0                     # Argument
	.long	0x101c                  # Argument: string.c
	.long	0x0                     # Argument
	.long	0x0                     # Argument
	.byte	242
	.byte	241
	.addrsig
